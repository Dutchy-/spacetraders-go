// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFactions request
	GetFactions(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFaction request
	GetFaction(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyAgent request
	GetMyAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContracts request
	GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContract request
	GetContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptContract request
	AcceptContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeliverContract request with any body
	DeliverContractWithBody(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeliverContract(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FulfillContract request
	FulfillContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShips request
	GetMyShips(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseShip request with any body
	PurchaseShipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseShip(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShip request
	GetMyShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyShipCargo request
	GetMyShipCargo(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChart request
	CreateChart(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipCooldown request
	GetShipCooldown(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DockShip request
	DockShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtractResources request with any body
	ExtractResourcesWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtractResources(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Jettison request with any body
	JettisonWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Jettison(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JumpShip request with any body
	JumpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JumpShip(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipNav request
	GetShipNav(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchShipNav request with any body
	PatchShipNavWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchShipNav(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NavigateShip request with any body
	NavigateShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NavigateShip(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrbitShip request
	OrbitShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PurchaseCargo request with any body
	PurchaseCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PurchaseCargo(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShipRefine request with any body
	ShipRefineWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShipRefine(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefuelShip request
	RefuelShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipShipScan request
	CreateShipShipScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipSystemScan request
	CreateShipSystemScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipWaypointScan request
	CreateShipWaypointScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SellCargo request with any body
	SellCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SellCargo(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSurvey request
	CreateSurvey(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferCargo request with any body
	TransferCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TransferCargo(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WarpShip request with any body
	WarpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WarpShip(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Register request with any body
	RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystems request
	GetSystems(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystem request
	GetSystem(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemWaypoints request
	GetSystemWaypoints(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWaypoint request
	GetWaypoint(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJumpGate request
	GetJumpGate(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarket request
	GetMarket(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipyard request
	GetShipyard(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFactions(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaction(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFactionRequest(c.Server, factionSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyAgentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverContractWithBody(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverContractRequestWithBody(c.Server, contractId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeliverContract(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeliverContractRequest(c.Server, contractId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FulfillContract(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFulfillContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShips(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseShip(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseShipRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyShipCargo(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyShipCargoRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChart(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChartRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipCooldown(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipCooldownRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DockShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDockShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResourcesWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractResources(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractResourcesRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JettisonWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJettisonRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Jettison(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJettisonRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JumpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJumpShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JumpShip(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJumpShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipNav(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipNavRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShipNavWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShipNavRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchShipNav(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchShipNavRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NavigateShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNavigateShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NavigateShip(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNavigateShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrbitShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrbitShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PurchaseCargo(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPurchaseCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShipRefineWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShipRefineRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShipRefine(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShipRefineRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefuelShip(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefuelShipRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipShipScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipShipScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipSystemScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipSystemScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipWaypointScan(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipWaypointScanRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SellCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSellCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SellCargo(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSellCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSurvey(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSurveyRequest(c.Server, shipSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferCargoWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferCargoRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferCargo(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferCargoRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WarpShipWithBody(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWarpShipRequestWithBody(c.Server, shipSymbol, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WarpShip(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWarpShipRequest(c.Server, shipSymbol, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Register(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystems(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystem(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemRequest(c.Server, systemSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemWaypoints(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemWaypointsRequest(c.Server, systemSymbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWaypoint(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWaypointRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJumpGate(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJumpGateRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarket(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipyard(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipyardRequest(c.Server, systemSymbol, waypointSymbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFactionsRequest generates requests for GetFactions
func NewGetFactionsRequest(server string, params *GetFactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFactionRequest generates requests for GetFaction
func NewGetFactionRequest(server string, factionSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factionSymbol", runtime.ParamLocationPath, factionSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/factions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyAgentRequest generates requests for GetMyAgent
func NewGetMyAgentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/agent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractsRequest generates requests for GetContracts
func NewGetContractsRequest(server string, params *GetContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractRequest generates requests for GetContract
func NewGetContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptContractRequest generates requests for AcceptContract
func NewAcceptContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeliverContractRequest calls the generic DeliverContract builder with application/json body
func NewDeliverContractRequest(server string, contractId string, body DeliverContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeliverContractRequestWithBody(server, contractId, "application/json", bodyReader)
}

// NewDeliverContractRequestWithBody generates requests for DeliverContract with any type of body
func NewDeliverContractRequestWithBody(server string, contractId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/deliver", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFulfillContractRequest generates requests for FulfillContract
func NewFulfillContractRequest(server string, contractId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/contracts/%s/fulfill", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyShipsRequest generates requests for GetMyShips
func NewGetMyShipsRequest(server string, params *GetMyShipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPurchaseShipRequest calls the generic PurchaseShip builder with application/json body
func NewPurchaseShipRequest(server string, body PurchaseShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseShipRequestWithBody(server, "application/json", bodyReader)
}

// NewPurchaseShipRequestWithBody generates requests for PurchaseShip with any type of body
func NewPurchaseShipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyShipRequest generates requests for GetMyShip
func NewGetMyShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyShipCargoRequest generates requests for GetMyShipCargo
func NewGetMyShipCargoRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/cargo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChartRequest generates requests for CreateChart
func NewCreateChartRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/chart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipCooldownRequest generates requests for GetShipCooldown
func NewGetShipCooldownRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/cooldown", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDockShipRequest generates requests for DockShip
func NewDockShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/dock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExtractResourcesRequest calls the generic ExtractResources builder with application/json body
func NewExtractResourcesRequest(server string, shipSymbol string, body ExtractResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtractResourcesRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewExtractResourcesRequestWithBody generates requests for ExtractResources with any type of body
func NewExtractResourcesRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/extract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJettisonRequest calls the generic Jettison builder with application/json body
func NewJettisonRequest(server string, shipSymbol string, body JettisonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJettisonRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewJettisonRequestWithBody generates requests for Jettison with any type of body
func NewJettisonRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/jettison", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJumpShipRequest calls the generic JumpShip builder with application/json body
func NewJumpShipRequest(server string, shipSymbol string, body JumpShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJumpShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewJumpShipRequestWithBody generates requests for JumpShip with any type of body
func NewJumpShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/jump", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetShipNavRequest generates requests for GetShipNav
func NewGetShipNavRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/nav", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchShipNavRequest calls the generic PatchShipNav builder with application/json body
func NewPatchShipNavRequest(server string, shipSymbol string, body PatchShipNavJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchShipNavRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewPatchShipNavRequestWithBody generates requests for PatchShipNav with any type of body
func NewPatchShipNavRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/nav", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNavigateShipRequest calls the generic NavigateShip builder with application/json body
func NewNavigateShipRequest(server string, shipSymbol string, body NavigateShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNavigateShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewNavigateShipRequestWithBody generates requests for NavigateShip with any type of body
func NewNavigateShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/navigate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrbitShipRequest generates requests for OrbitShip
func NewOrbitShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/orbit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPurchaseCargoRequest calls the generic PurchaseCargo builder with application/json body
func NewPurchaseCargoRequest(server string, shipSymbol string, body PurchaseCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPurchaseCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewPurchaseCargoRequestWithBody generates requests for PurchaseCargo with any type of body
func NewPurchaseCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/purchase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShipRefineRequest calls the generic ShipRefine builder with application/json body
func NewShipRefineRequest(server string, shipSymbol string, body ShipRefineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShipRefineRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewShipRefineRequestWithBody generates requests for ShipRefine with any type of body
func NewShipRefineRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/refine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRefuelShipRequest generates requests for RefuelShip
func NewRefuelShipRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/refuel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipShipScanRequest generates requests for CreateShipShipScan
func NewCreateShipShipScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/ships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipSystemScanRequest generates requests for CreateShipSystemScan
func NewCreateShipSystemScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/systems", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateShipWaypointScanRequest generates requests for CreateShipWaypointScan
func NewCreateShipWaypointScanRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/scan/waypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSellCargoRequest calls the generic SellCargo builder with application/json body
func NewSellCargoRequest(server string, shipSymbol string, body SellCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSellCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewSellCargoRequestWithBody generates requests for SellCargo with any type of body
func NewSellCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSurveyRequest generates requests for CreateSurvey
func NewCreateSurveyRequest(server string, shipSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/survey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTransferCargoRequest calls the generic TransferCargo builder with application/json body
func NewTransferCargoRequest(server string, shipSymbol string, body TransferCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferCargoRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewTransferCargoRequestWithBody generates requests for TransferCargo with any type of body
func NewTransferCargoRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWarpShipRequest calls the generic WarpShip builder with application/json body
func NewWarpShipRequest(server string, shipSymbol string, body WarpShipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWarpShipRequestWithBody(server, shipSymbol, "application/json", bodyReader)
}

// NewWarpShipRequestWithBody generates requests for WarpShip with any type of body
func NewWarpShipRequestWithBody(server string, shipSymbol string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipSymbol", runtime.ParamLocationPath, shipSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/ships/%s/warp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterRequest calls the generic Register builder with application/json body
func NewRegisterRequest(server string, body RegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterRequestWithBody generates requests for Register with any type of body
func NewRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemsRequest generates requests for GetSystems
func NewGetSystemsRequest(server string, params *GetSystemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemRequest generates requests for GetSystem
func NewGetSystemRequest(server string, systemSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemWaypointsRequest generates requests for GetSystemWaypoints
func NewGetSystemWaypointsRequest(server string, systemSymbol string, params *GetSystemWaypointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWaypointRequest generates requests for GetWaypoint
func NewGetWaypointRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJumpGateRequest generates requests for GetJumpGate
func NewGetJumpGateRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/jump-gate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketRequest generates requests for GetMarket
func NewGetMarketRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/market", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipyardRequest generates requests for GetShipyard
func NewGetShipyardRequest(server string, systemSymbol string, waypointSymbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "systemSymbol", runtime.ParamLocationPath, systemSymbol)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "waypointSymbol", runtime.ParamLocationPath, waypointSymbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/systems/%s/waypoints/%s/shipyard", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFactions request
	GetFactionsWithResponse(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*GetFactionsResponse, error)

	// GetFaction request
	GetFactionWithResponse(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*GetFactionResponse, error)

	// GetMyAgent request
	GetMyAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyAgentResponse, error)

	// GetContracts request
	GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error)

	// GetContract request
	GetContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*GetContractResponse, error)

	// AcceptContract request
	AcceptContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*AcceptContractResponse, error)

	// DeliverContract request with any body
	DeliverContractWithBodyWithResponse(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error)

	DeliverContractWithResponse(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error)

	// FulfillContract request
	FulfillContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*FulfillContractResponse, error)

	// GetMyShips request
	GetMyShipsWithResponse(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*GetMyShipsResponse, error)

	// PurchaseShip request with any body
	PurchaseShipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error)

	PurchaseShipWithResponse(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error)

	// GetMyShip request
	GetMyShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipResponse, error)

	// GetMyShipCargo request
	GetMyShipCargoWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipCargoResponse, error)

	// CreateChart request
	CreateChartWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateChartResponse, error)

	// GetShipCooldown request
	GetShipCooldownWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipCooldownResponse, error)

	// DockShip request
	DockShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*DockShipResponse, error)

	// ExtractResources request with any body
	ExtractResourcesWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error)

	ExtractResourcesWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error)

	// Jettison request with any body
	JettisonWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JettisonResponse, error)

	JettisonWithResponse(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*JettisonResponse, error)

	// JumpShip request with any body
	JumpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JumpShipResponse, error)

	JumpShipWithResponse(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*JumpShipResponse, error)

	// GetShipNav request
	GetShipNavWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipNavResponse, error)

	// PatchShipNav request with any body
	PatchShipNavWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error)

	PatchShipNavWithResponse(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error)

	// NavigateShip request with any body
	NavigateShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error)

	NavigateShipWithResponse(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error)

	// OrbitShip request
	OrbitShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*OrbitShipResponse, error)

	// PurchaseCargo request with any body
	PurchaseCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error)

	PurchaseCargoWithResponse(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error)

	// ShipRefine request with any body
	ShipRefineWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error)

	ShipRefineWithResponse(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error)

	// RefuelShip request
	RefuelShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error)

	// CreateShipShipScan request
	CreateShipShipScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipShipScanResponse, error)

	// CreateShipSystemScan request
	CreateShipSystemScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipSystemScanResponse, error)

	// CreateShipWaypointScan request
	CreateShipWaypointScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipWaypointScanResponse, error)

	// SellCargo request with any body
	SellCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SellCargoResponse, error)

	SellCargoWithResponse(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*SellCargoResponse, error)

	// CreateSurvey request
	CreateSurveyWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateSurveyResponse, error)

	// TransferCargo request with any body
	TransferCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error)

	TransferCargoWithResponse(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error)

	// WarpShip request with any body
	WarpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WarpShipResponse, error)

	WarpShipWithResponse(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*WarpShipResponse, error)

	// Register request with any body
	RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error)

	// GetSystems request
	GetSystemsWithResponse(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*GetSystemsResponse, error)

	// GetSystem request
	GetSystemWithResponse(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error)

	// GetSystemWaypoints request
	GetSystemWaypointsWithResponse(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*GetSystemWaypointsResponse, error)

	// GetWaypoint request
	GetWaypointWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetWaypointResponse, error)

	// GetJumpGate request
	GetJumpGateWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetJumpGateResponse, error)

	// GetMarket request
	GetMarketWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetMarketResponse, error)

	// GetShipyard request
	GetShipyardWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetShipyardResponse, error)
}

type GetFactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Faction `json:"data"`
		Meta Meta      `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Faction `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Agent `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Contract `json:"data"`
		Meta Meta       `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Contract `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Agent    Agent    `json:"agent"`
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r AcceptContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeliverContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo    ShipCargo `json:"cargo"`
			Contract Contract  `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r DeliverContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeliverContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FulfillContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Agent    Agent    `json:"agent"`
			Contract Contract `json:"contract"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r FulfillContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FulfillContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Ship `json:"data"`
		Meta Meta   `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent Agent `json:"agent"`

			// Ship A ship
			Ship        Ship                `json:"ship"`
			Transaction ShipyardTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PurchaseShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A ship
		Data Ship `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyShipCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ShipCargo `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyShipCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyShipCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Chart The chart of a system or waypoint, which makes the location visible to other agents.
			Chart Chart `json:"chart"`

			// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
			Waypoint Waypoint `json:"waypoint"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateChartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipCooldownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A cooldown is a period of time in which a ship cannot perform certain actions.
		Data Cooldown `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipCooldownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipCooldownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DockShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r DockShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DockShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtractResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Cargo ShipCargo `json:"cargo"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown   Cooldown   `json:"cooldown"`
			Extraction Extraction `json:"extraction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r ExtractResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtractResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JettisonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo ShipCargo `json:"cargo"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r JettisonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JettisonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JumpShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`

			// Nav The navigation information of the ship.
			Nav *ShipNav `json:"nav,omitempty"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r JumpShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JumpShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipNavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The navigation information of the ship.
		Data ShipNav `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipNavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipNavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchShipNavResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data The navigation information of the ship.
		Data ShipNav `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchShipNavResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchShipNavResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NavigateShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`

			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r NavigateShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NavigateShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrbitShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r OrbitShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrbitShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PurchaseCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent       Agent             `json:"agent"`
			Cargo       ShipCargo         `json:"cargo"`
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r PurchaseCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PurchaseCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShipRefineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo    ShipCargo `json:"cargo"`
			Consumed []struct {
				TradeSymbol *string `json:"tradeSymbol,omitempty"`
				Units       *int    `json:"units,omitempty"`
			} `json:"consumed"`

			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`
			Produced []struct {
				TradeSymbol *string `json:"tradeSymbol,omitempty"`
				Units       *int    `json:"units,omitempty"`
			} `json:"produced"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r ShipRefineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShipRefineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefuelShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Agent Agent `json:"agent"`

			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r RefuelShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefuelShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipShipScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown      `json:"cooldown"`
			Ships    []ScannedShip `json:"ships"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipShipScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipShipScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipSystemScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown        `json:"cooldown"`
			Systems  []ScannedSystem `json:"systems"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipSystemScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipSystemScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipWaypointScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown  Cooldown          `json:"cooldown"`
			Waypoints []ScannedWaypoint `json:"waypoints"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateShipWaypointScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipWaypointScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SellCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent       Agent             `json:"agent"`
			Cargo       ShipCargo         `json:"cargo"`
			Transaction MarketTransaction `json:"transaction"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r SellCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SellCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSurveyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
			Cooldown Cooldown `json:"cooldown"`
			Surveys  []Survey `json:"surveys"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSurveyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSurveyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Cargo ShipCargo `json:"cargo"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r TransferCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WarpShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
			Fuel ShipFuel `json:"fuel"`

			// Nav The navigation information of the ship.
			Nav ShipNav `json:"nav"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r WarpShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WarpShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data struct {
			Agent    Agent    `json:"agent"`
			Contract Contract `json:"contract"`
			Faction  Faction  `json:"faction"`

			// Ship A ship
			Ship Ship `json:"ship"`

			// Token A Bearer token for accessing secured API endpoints.
			Token string `json:"token"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r RegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []System `json:"data"`
		Meta Meta     `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data System `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemWaypointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []Waypoint `json:"data"`
		Meta Meta       `json:"meta"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemWaypointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemWaypointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWaypointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
		Data Waypoint `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWaypointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWaypointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJumpGateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data JumpGate `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetJumpGateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJumpGateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Market `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMarketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipyardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Shipyard `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetShipyardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipyardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFactionsWithResponse request returning *GetFactionsResponse
func (c *ClientWithResponses) GetFactionsWithResponse(ctx context.Context, params *GetFactionsParams, reqEditors ...RequestEditorFn) (*GetFactionsResponse, error) {
	rsp, err := c.GetFactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFactionsResponse(rsp)
}

// GetFactionWithResponse request returning *GetFactionResponse
func (c *ClientWithResponses) GetFactionWithResponse(ctx context.Context, factionSymbol string, reqEditors ...RequestEditorFn) (*GetFactionResponse, error) {
	rsp, err := c.GetFaction(ctx, factionSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFactionResponse(rsp)
}

// GetMyAgentWithResponse request returning *GetMyAgentResponse
func (c *ClientWithResponses) GetMyAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyAgentResponse, error) {
	rsp, err := c.GetMyAgent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyAgentResponse(rsp)
}

// GetContractsWithResponse request returning *GetContractsResponse
func (c *ClientWithResponses) GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error) {
	rsp, err := c.GetContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsResponse(rsp)
}

// GetContractWithResponse request returning *GetContractResponse
func (c *ClientWithResponses) GetContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*GetContractResponse, error) {
	rsp, err := c.GetContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractResponse(rsp)
}

// AcceptContractWithResponse request returning *AcceptContractResponse
func (c *ClientWithResponses) AcceptContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*AcceptContractResponse, error) {
	rsp, err := c.AcceptContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptContractResponse(rsp)
}

// DeliverContractWithBodyWithResponse request with arbitrary body returning *DeliverContractResponse
func (c *ClientWithResponses) DeliverContractWithBodyWithResponse(ctx context.Context, contractId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error) {
	rsp, err := c.DeliverContractWithBody(ctx, contractId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverContractResponse(rsp)
}

func (c *ClientWithResponses) DeliverContractWithResponse(ctx context.Context, contractId string, body DeliverContractJSONRequestBody, reqEditors ...RequestEditorFn) (*DeliverContractResponse, error) {
	rsp, err := c.DeliverContract(ctx, contractId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeliverContractResponse(rsp)
}

// FulfillContractWithResponse request returning *FulfillContractResponse
func (c *ClientWithResponses) FulfillContractWithResponse(ctx context.Context, contractId string, reqEditors ...RequestEditorFn) (*FulfillContractResponse, error) {
	rsp, err := c.FulfillContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFulfillContractResponse(rsp)
}

// GetMyShipsWithResponse request returning *GetMyShipsResponse
func (c *ClientWithResponses) GetMyShipsWithResponse(ctx context.Context, params *GetMyShipsParams, reqEditors ...RequestEditorFn) (*GetMyShipsResponse, error) {
	rsp, err := c.GetMyShips(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipsResponse(rsp)
}

// PurchaseShipWithBodyWithResponse request with arbitrary body returning *PurchaseShipResponse
func (c *ClientWithResponses) PurchaseShipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error) {
	rsp, err := c.PurchaseShipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipResponse(rsp)
}

func (c *ClientWithResponses) PurchaseShipWithResponse(ctx context.Context, body PurchaseShipJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseShipResponse, error) {
	rsp, err := c.PurchaseShip(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseShipResponse(rsp)
}

// GetMyShipWithResponse request returning *GetMyShipResponse
func (c *ClientWithResponses) GetMyShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipResponse, error) {
	rsp, err := c.GetMyShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipResponse(rsp)
}

// GetMyShipCargoWithResponse request returning *GetMyShipCargoResponse
func (c *ClientWithResponses) GetMyShipCargoWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetMyShipCargoResponse, error) {
	rsp, err := c.GetMyShipCargo(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyShipCargoResponse(rsp)
}

// CreateChartWithResponse request returning *CreateChartResponse
func (c *ClientWithResponses) CreateChartWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateChartResponse, error) {
	rsp, err := c.CreateChart(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChartResponse(rsp)
}

// GetShipCooldownWithResponse request returning *GetShipCooldownResponse
func (c *ClientWithResponses) GetShipCooldownWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipCooldownResponse, error) {
	rsp, err := c.GetShipCooldown(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipCooldownResponse(rsp)
}

// DockShipWithResponse request returning *DockShipResponse
func (c *ClientWithResponses) DockShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*DockShipResponse, error) {
	rsp, err := c.DockShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDockShipResponse(rsp)
}

// ExtractResourcesWithBodyWithResponse request with arbitrary body returning *ExtractResourcesResponse
func (c *ClientWithResponses) ExtractResourcesWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error) {
	rsp, err := c.ExtractResourcesWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesResponse(rsp)
}

func (c *ClientWithResponses) ExtractResourcesWithResponse(ctx context.Context, shipSymbol string, body ExtractResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractResourcesResponse, error) {
	rsp, err := c.ExtractResources(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractResourcesResponse(rsp)
}

// JettisonWithBodyWithResponse request with arbitrary body returning *JettisonResponse
func (c *ClientWithResponses) JettisonWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JettisonResponse, error) {
	rsp, err := c.JettisonWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJettisonResponse(rsp)
}

func (c *ClientWithResponses) JettisonWithResponse(ctx context.Context, shipSymbol string, body JettisonJSONRequestBody, reqEditors ...RequestEditorFn) (*JettisonResponse, error) {
	rsp, err := c.Jettison(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJettisonResponse(rsp)
}

// JumpShipWithBodyWithResponse request with arbitrary body returning *JumpShipResponse
func (c *ClientWithResponses) JumpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JumpShipResponse, error) {
	rsp, err := c.JumpShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJumpShipResponse(rsp)
}

func (c *ClientWithResponses) JumpShipWithResponse(ctx context.Context, shipSymbol string, body JumpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*JumpShipResponse, error) {
	rsp, err := c.JumpShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJumpShipResponse(rsp)
}

// GetShipNavWithResponse request returning *GetShipNavResponse
func (c *ClientWithResponses) GetShipNavWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*GetShipNavResponse, error) {
	rsp, err := c.GetShipNav(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipNavResponse(rsp)
}

// PatchShipNavWithBodyWithResponse request with arbitrary body returning *PatchShipNavResponse
func (c *ClientWithResponses) PatchShipNavWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error) {
	rsp, err := c.PatchShipNavWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShipNavResponse(rsp)
}

func (c *ClientWithResponses) PatchShipNavWithResponse(ctx context.Context, shipSymbol string, body PatchShipNavJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchShipNavResponse, error) {
	rsp, err := c.PatchShipNav(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchShipNavResponse(rsp)
}

// NavigateShipWithBodyWithResponse request with arbitrary body returning *NavigateShipResponse
func (c *ClientWithResponses) NavigateShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error) {
	rsp, err := c.NavigateShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNavigateShipResponse(rsp)
}

func (c *ClientWithResponses) NavigateShipWithResponse(ctx context.Context, shipSymbol string, body NavigateShipJSONRequestBody, reqEditors ...RequestEditorFn) (*NavigateShipResponse, error) {
	rsp, err := c.NavigateShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNavigateShipResponse(rsp)
}

// OrbitShipWithResponse request returning *OrbitShipResponse
func (c *ClientWithResponses) OrbitShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*OrbitShipResponse, error) {
	rsp, err := c.OrbitShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrbitShipResponse(rsp)
}

// PurchaseCargoWithBodyWithResponse request with arbitrary body returning *PurchaseCargoResponse
func (c *ClientWithResponses) PurchaseCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error) {
	rsp, err := c.PurchaseCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseCargoResponse(rsp)
}

func (c *ClientWithResponses) PurchaseCargoWithResponse(ctx context.Context, shipSymbol string, body PurchaseCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*PurchaseCargoResponse, error) {
	rsp, err := c.PurchaseCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePurchaseCargoResponse(rsp)
}

// ShipRefineWithBodyWithResponse request with arbitrary body returning *ShipRefineResponse
func (c *ClientWithResponses) ShipRefineWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error) {
	rsp, err := c.ShipRefineWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShipRefineResponse(rsp)
}

func (c *ClientWithResponses) ShipRefineWithResponse(ctx context.Context, shipSymbol string, body ShipRefineJSONRequestBody, reqEditors ...RequestEditorFn) (*ShipRefineResponse, error) {
	rsp, err := c.ShipRefine(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShipRefineResponse(rsp)
}

// RefuelShipWithResponse request returning *RefuelShipResponse
func (c *ClientWithResponses) RefuelShipWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*RefuelShipResponse, error) {
	rsp, err := c.RefuelShip(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefuelShipResponse(rsp)
}

// CreateShipShipScanWithResponse request returning *CreateShipShipScanResponse
func (c *ClientWithResponses) CreateShipShipScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipShipScanResponse, error) {
	rsp, err := c.CreateShipShipScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipShipScanResponse(rsp)
}

// CreateShipSystemScanWithResponse request returning *CreateShipSystemScanResponse
func (c *ClientWithResponses) CreateShipSystemScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipSystemScanResponse, error) {
	rsp, err := c.CreateShipSystemScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipSystemScanResponse(rsp)
}

// CreateShipWaypointScanWithResponse request returning *CreateShipWaypointScanResponse
func (c *ClientWithResponses) CreateShipWaypointScanWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateShipWaypointScanResponse, error) {
	rsp, err := c.CreateShipWaypointScan(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipWaypointScanResponse(rsp)
}

// SellCargoWithBodyWithResponse request with arbitrary body returning *SellCargoResponse
func (c *ClientWithResponses) SellCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SellCargoResponse, error) {
	rsp, err := c.SellCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSellCargoResponse(rsp)
}

func (c *ClientWithResponses) SellCargoWithResponse(ctx context.Context, shipSymbol string, body SellCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*SellCargoResponse, error) {
	rsp, err := c.SellCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSellCargoResponse(rsp)
}

// CreateSurveyWithResponse request returning *CreateSurveyResponse
func (c *ClientWithResponses) CreateSurveyWithResponse(ctx context.Context, shipSymbol string, reqEditors ...RequestEditorFn) (*CreateSurveyResponse, error) {
	rsp, err := c.CreateSurvey(ctx, shipSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSurveyResponse(rsp)
}

// TransferCargoWithBodyWithResponse request with arbitrary body returning *TransferCargoResponse
func (c *ClientWithResponses) TransferCargoWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error) {
	rsp, err := c.TransferCargoWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferCargoResponse(rsp)
}

func (c *ClientWithResponses) TransferCargoWithResponse(ctx context.Context, shipSymbol string, body TransferCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferCargoResponse, error) {
	rsp, err := c.TransferCargo(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferCargoResponse(rsp)
}

// WarpShipWithBodyWithResponse request with arbitrary body returning *WarpShipResponse
func (c *ClientWithResponses) WarpShipWithBodyWithResponse(ctx context.Context, shipSymbol string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WarpShipResponse, error) {
	rsp, err := c.WarpShipWithBody(ctx, shipSymbol, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWarpShipResponse(rsp)
}

func (c *ClientWithResponses) WarpShipWithResponse(ctx context.Context, shipSymbol string, body WarpShipJSONRequestBody, reqEditors ...RequestEditorFn) (*WarpShipResponse, error) {
	rsp, err := c.WarpShip(ctx, shipSymbol, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWarpShipResponse(rsp)
}

// RegisterWithBodyWithResponse request with arbitrary body returning *RegisterResponse
func (c *ClientWithResponses) RegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.RegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

func (c *ClientWithResponses) RegisterWithResponse(ctx context.Context, body RegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterResponse, error) {
	rsp, err := c.Register(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterResponse(rsp)
}

// GetSystemsWithResponse request returning *GetSystemsResponse
func (c *ClientWithResponses) GetSystemsWithResponse(ctx context.Context, params *GetSystemsParams, reqEditors ...RequestEditorFn) (*GetSystemsResponse, error) {
	rsp, err := c.GetSystems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemsResponse(rsp)
}

// GetSystemWithResponse request returning *GetSystemResponse
func (c *ClientWithResponses) GetSystemWithResponse(ctx context.Context, systemSymbol string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error) {
	rsp, err := c.GetSystem(ctx, systemSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemResponse(rsp)
}

// GetSystemWaypointsWithResponse request returning *GetSystemWaypointsResponse
func (c *ClientWithResponses) GetSystemWaypointsWithResponse(ctx context.Context, systemSymbol string, params *GetSystemWaypointsParams, reqEditors ...RequestEditorFn) (*GetSystemWaypointsResponse, error) {
	rsp, err := c.GetSystemWaypoints(ctx, systemSymbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemWaypointsResponse(rsp)
}

// GetWaypointWithResponse request returning *GetWaypointResponse
func (c *ClientWithResponses) GetWaypointWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetWaypointResponse, error) {
	rsp, err := c.GetWaypoint(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWaypointResponse(rsp)
}

// GetJumpGateWithResponse request returning *GetJumpGateResponse
func (c *ClientWithResponses) GetJumpGateWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetJumpGateResponse, error) {
	rsp, err := c.GetJumpGate(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJumpGateResponse(rsp)
}

// GetMarketWithResponse request returning *GetMarketResponse
func (c *ClientWithResponses) GetMarketWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetMarketResponse, error) {
	rsp, err := c.GetMarket(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketResponse(rsp)
}

// GetShipyardWithResponse request returning *GetShipyardResponse
func (c *ClientWithResponses) GetShipyardWithResponse(ctx context.Context, systemSymbol string, waypointSymbol string, reqEditors ...RequestEditorFn) (*GetShipyardResponse, error) {
	rsp, err := c.GetShipyard(ctx, systemSymbol, waypointSymbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipyardResponse(rsp)
}

// ParseGetFactionsResponse parses an HTTP response from a GetFactionsWithResponse call
func ParseGetFactionsResponse(rsp *http.Response) (*GetFactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Faction `json:"data"`
			Meta Meta      `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFactionResponse parses an HTTP response from a GetFactionWithResponse call
func ParseGetFactionResponse(rsp *http.Response) (*GetFactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Faction `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyAgentResponse parses an HTTP response from a GetMyAgentWithResponse call
func ParseGetMyAgentResponse(rsp *http.Response) (*GetMyAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Agent `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractsResponse parses an HTTP response from a GetContractsWithResponse call
func ParseGetContractsResponse(rsp *http.Response) (*GetContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Contract `json:"data"`
			Meta Meta       `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractResponse parses an HTTP response from a GetContractWithResponse call
func ParseGetContractResponse(rsp *http.Response) (*GetContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Contract `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAcceptContractResponse parses an HTTP response from a AcceptContractWithResponse call
func ParseAcceptContractResponse(rsp *http.Response) (*AcceptContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Agent    Agent    `json:"agent"`
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeliverContractResponse parses an HTTP response from a DeliverContractWithResponse call
func ParseDeliverContractResponse(rsp *http.Response) (*DeliverContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeliverContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo    ShipCargo `json:"cargo"`
				Contract Contract  `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFulfillContractResponse parses an HTTP response from a FulfillContractWithResponse call
func ParseFulfillContractResponse(rsp *http.Response) (*FulfillContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FulfillContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Agent    Agent    `json:"agent"`
				Contract Contract `json:"contract"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyShipsResponse parses an HTTP response from a GetMyShipsWithResponse call
func ParseGetMyShipsResponse(rsp *http.Response) (*GetMyShipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Ship `json:"data"`
			Meta Meta   `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePurchaseShipResponse parses an HTTP response from a PurchaseShipWithResponse call
func ParsePurchaseShipResponse(rsp *http.Response) (*PurchaseShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent Agent `json:"agent"`

				// Ship A ship
				Ship        Ship                `json:"ship"`
				Transaction ShipyardTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMyShipResponse parses an HTTP response from a GetMyShipWithResponse call
func ParseGetMyShipResponse(rsp *http.Response) (*GetMyShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A ship
			Data Ship `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyShipCargoResponse parses an HTTP response from a GetMyShipCargoWithResponse call
func ParseGetMyShipCargoResponse(rsp *http.Response) (*GetMyShipCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyShipCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ShipCargo `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChartResponse parses an HTTP response from a CreateChartWithResponse call
func ParseCreateChartResponse(rsp *http.Response) (*CreateChartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Chart The chart of a system or waypoint, which makes the location visible to other agents.
				Chart Chart `json:"chart"`

				// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
				Waypoint Waypoint `json:"waypoint"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetShipCooldownResponse parses an HTTP response from a GetShipCooldownWithResponse call
func ParseGetShipCooldownResponse(rsp *http.Response) (*GetShipCooldownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipCooldownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A cooldown is a period of time in which a ship cannot perform certain actions.
			Data Cooldown `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDockShipResponse parses an HTTP response from a DockShipWithResponse call
func ParseDockShipResponse(rsp *http.Response) (*DockShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DockShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExtractResourcesResponse parses an HTTP response from a ExtractResourcesWithResponse call
func ParseExtractResourcesResponse(rsp *http.Response) (*ExtractResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtractResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Cargo ShipCargo `json:"cargo"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown   Cooldown   `json:"cooldown"`
				Extraction Extraction `json:"extraction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJettisonResponse parses an HTTP response from a JettisonWithResponse call
func ParseJettisonResponse(rsp *http.Response) (*JettisonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JettisonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo ShipCargo `json:"cargo"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJumpShipResponse parses an HTTP response from a JumpShipWithResponse call
func ParseJumpShipResponse(rsp *http.Response) (*JumpShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JumpShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`

				// Nav The navigation information of the ship.
				Nav *ShipNav `json:"nav,omitempty"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShipNavResponse parses an HTTP response from a GetShipNavWithResponse call
func ParseGetShipNavResponse(rsp *http.Response) (*GetShipNavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipNavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The navigation information of the ship.
			Data ShipNav `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchShipNavResponse parses an HTTP response from a PatchShipNavWithResponse call
func ParsePatchShipNavResponse(rsp *http.Response) (*PatchShipNavResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchShipNavResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data The navigation information of the ship.
			Data ShipNav `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNavigateShipResponse parses an HTTP response from a NavigateShipWithResponse call
func ParseNavigateShipResponse(rsp *http.Response) (*NavigateShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NavigateShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`

				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrbitShipResponse parses an HTTP response from a OrbitShipWithResponse call
func ParseOrbitShipResponse(rsp *http.Response) (*OrbitShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrbitShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePurchaseCargoResponse parses an HTTP response from a PurchaseCargoWithResponse call
func ParsePurchaseCargoResponse(rsp *http.Response) (*PurchaseCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PurchaseCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent       Agent             `json:"agent"`
				Cargo       ShipCargo         `json:"cargo"`
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseShipRefineResponse parses an HTTP response from a ShipRefineWithResponse call
func ParseShipRefineResponse(rsp *http.Response) (*ShipRefineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShipRefineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo    ShipCargo `json:"cargo"`
				Consumed []struct {
					TradeSymbol *string `json:"tradeSymbol,omitempty"`
					Units       *int    `json:"units,omitempty"`
				} `json:"consumed"`

				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`
				Produced []struct {
					TradeSymbol *string `json:"tradeSymbol,omitempty"`
					Units       *int    `json:"units,omitempty"`
				} `json:"produced"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefuelShipResponse parses an HTTP response from a RefuelShipWithResponse call
func ParseRefuelShipResponse(rsp *http.Response) (*RefuelShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefuelShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Agent Agent `json:"agent"`

				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateShipShipScanResponse parses an HTTP response from a CreateShipShipScanWithResponse call
func ParseCreateShipShipScanResponse(rsp *http.Response) (*CreateShipShipScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipShipScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown      `json:"cooldown"`
				Ships    []ScannedShip `json:"ships"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateShipSystemScanResponse parses an HTTP response from a CreateShipSystemScanWithResponse call
func ParseCreateShipSystemScanResponse(rsp *http.Response) (*CreateShipSystemScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipSystemScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown        `json:"cooldown"`
				Systems  []ScannedSystem `json:"systems"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateShipWaypointScanResponse parses an HTTP response from a CreateShipWaypointScanWithResponse call
func ParseCreateShipWaypointScanResponse(rsp *http.Response) (*CreateShipWaypointScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateShipWaypointScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown  Cooldown          `json:"cooldown"`
				Waypoints []ScannedWaypoint `json:"waypoints"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSellCargoResponse parses an HTTP response from a SellCargoWithResponse call
func ParseSellCargoResponse(rsp *http.Response) (*SellCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SellCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent       Agent             `json:"agent"`
				Cargo       ShipCargo         `json:"cargo"`
				Transaction MarketTransaction `json:"transaction"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateSurveyResponse parses an HTTP response from a CreateSurveyWithResponse call
func ParseCreateSurveyResponse(rsp *http.Response) (*CreateSurveyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSurveyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
				Cooldown Cooldown `json:"cooldown"`
				Surveys  []Survey `json:"surveys"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTransferCargoResponse parses an HTTP response from a TransferCargoWithResponse call
func ParseTransferCargoResponse(rsp *http.Response) (*TransferCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransferCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Cargo ShipCargo `json:"cargo"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWarpShipResponse parses an HTTP response from a WarpShipWithResponse call
func ParseWarpShipResponse(rsp *http.Response) (*WarpShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WarpShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
				Fuel ShipFuel `json:"fuel"`

				// Nav The navigation information of the ship.
				Nav ShipNav `json:"nav"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterResponse parses an HTTP response from a RegisterWithResponse call
func ParseRegisterResponse(rsp *http.Response) (*RegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data struct {
				Agent    Agent    `json:"agent"`
				Contract Contract `json:"contract"`
				Faction  Faction  `json:"faction"`

				// Ship A ship
				Ship Ship `json:"ship"`

				// Token A Bearer token for accessing secured API endpoints.
				Token string `json:"token"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSystemsResponse parses an HTTP response from a GetSystemsWithResponse call
func ParseGetSystemsResponse(rsp *http.Response) (*GetSystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []System `json:"data"`
			Meta Meta     `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemResponse parses an HTTP response from a GetSystemWithResponse call
func ParseGetSystemResponse(rsp *http.Response) (*GetSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data System `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemWaypointsResponse parses an HTTP response from a GetSystemWaypointsWithResponse call
func ParseGetSystemWaypointsResponse(rsp *http.Response) (*GetSystemWaypointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemWaypointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []Waypoint `json:"data"`
			Meta Meta       `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWaypointResponse parses an HTTP response from a GetWaypointWithResponse call
func ParseGetWaypointResponse(rsp *http.Response) (*GetWaypointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWaypointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
			Data Waypoint `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJumpGateResponse parses an HTTP response from a GetJumpGateWithResponse call
func ParseGetJumpGateResponse(rsp *http.Response) (*GetJumpGateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJumpGateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data JumpGate `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarketResponse parses an HTTP response from a GetMarketWithResponse call
func ParseGetMarketResponse(rsp *http.Response) (*GetMarketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Market `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetShipyardResponse parses an HTTP response from a GetShipyardWithResponse call
func ParseGetShipyardResponse(rsp *http.Response) (*GetShipyardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShipyardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Shipyard `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
