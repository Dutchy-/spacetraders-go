// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"time"
)

const (
	AgentTokenScopes = "AgentToken.Scopes"
)

// Defines values for ContractType.
const (
	ContractTypePROCUREMENT ContractType = "PROCUREMENT"
	ContractTypeSHUTTLE     ContractType = "SHUTTLE"
	ContractTypeTRANSPORT   ContractType = "TRANSPORT"
)

// Defines values for FactionTraitSymbol.
const (
	FactionTraitSymbolADAPTABLE               FactionTraitSymbol = "ADAPTABLE"
	FactionTraitSymbolAGGRESSIVE              FactionTraitSymbol = "AGGRESSIVE"
	FactionTraitSymbolBOLD                    FactionTraitSymbol = "BOLD"
	FactionTraitSymbolBRUTAL                  FactionTraitSymbol = "BRUTAL"
	FactionTraitSymbolBUREAUCRATIC            FactionTraitSymbol = "BUREAUCRATIC"
	FactionTraitSymbolCAPITALISTIC            FactionTraitSymbol = "CAPITALISTIC"
	FactionTraitSymbolCLAN                    FactionTraitSymbol = "CLAN"
	FactionTraitSymbolCOLLABORATIVE           FactionTraitSymbol = "COLLABORATIVE"
	FactionTraitSymbolCOMMERCIAL              FactionTraitSymbol = "COMMERCIAL"
	FactionTraitSymbolCOOPERATIVE             FactionTraitSymbol = "COOPERATIVE"
	FactionTraitSymbolCURIOUS                 FactionTraitSymbol = "CURIOUS"
	FactionTraitSymbolDARING                  FactionTraitSymbol = "DARING"
	FactionTraitSymbolDEFENSIVE               FactionTraitSymbol = "DEFENSIVE"
	FactionTraitSymbolDEXTEROUS               FactionTraitSymbol = "DEXTEROUS"
	FactionTraitSymbolDISTRUSTFUL             FactionTraitSymbol = "DISTRUSTFUL"
	FactionTraitSymbolDIVERSE                 FactionTraitSymbol = "DIVERSE"
	FactionTraitSymbolDOMINANT                FactionTraitSymbol = "DOMINANT"
	FactionTraitSymbolDOMINION                FactionTraitSymbol = "DOMINION"
	FactionTraitSymbolENTREPRENEURIAL         FactionTraitSymbol = "ENTREPRENEURIAL"
	FactionTraitSymbolESTABLISHED             FactionTraitSymbol = "ESTABLISHED"
	FactionTraitSymbolEXILES                  FactionTraitSymbol = "EXILES"
	FactionTraitSymbolEXPLORATORY             FactionTraitSymbol = "EXPLORATORY"
	FactionTraitSymbolFLEETING                FactionTraitSymbol = "FLEETING"
	FactionTraitSymbolFLEXIBLE                FactionTraitSymbol = "FLEXIBLE"
	FactionTraitSymbolFORSAKEN                FactionTraitSymbol = "FORSAKEN"
	FactionTraitSymbolFRAGMENTED              FactionTraitSymbol = "FRAGMENTED"
	FactionTraitSymbolFREEMARKETS             FactionTraitSymbol = "FREE_MARKETS"
	FactionTraitSymbolFRINGE                  FactionTraitSymbol = "FRINGE"
	FactionTraitSymbolGUILD                   FactionTraitSymbol = "GUILD"
	FactionTraitSymbolIMPERIALISTIC           FactionTraitSymbol = "IMPERIALISTIC"
	FactionTraitSymbolINDEPENDENT             FactionTraitSymbol = "INDEPENDENT"
	FactionTraitSymbolINDUSTRIOUS             FactionTraitSymbol = "INDUSTRIOUS"
	FactionTraitSymbolINESCAPABLE             FactionTraitSymbol = "INESCAPABLE"
	FactionTraitSymbolINNOVATIVE              FactionTraitSymbol = "INNOVATIVE"
	FactionTraitSymbolINTELLIGENT             FactionTraitSymbol = "INTELLIGENT"
	FactionTraitSymbolISOLATED                FactionTraitSymbol = "ISOLATED"
	FactionTraitSymbolLOCALIZED               FactionTraitSymbol = "LOCALIZED"
	FactionTraitSymbolMILITARISTIC            FactionTraitSymbol = "MILITARISTIC"
	FactionTraitSymbolNOTABLE                 FactionTraitSymbol = "NOTABLE"
	FactionTraitSymbolPEACEFUL                FactionTraitSymbol = "PEACEFUL"
	FactionTraitSymbolPIRATES                 FactionTraitSymbol = "PIRATES"
	FactionTraitSymbolPROGRESSIVE             FactionTraitSymbol = "PROGRESSIVE"
	FactionTraitSymbolPROUD                   FactionTraitSymbol = "PROUD"
	FactionTraitSymbolRAIDERS                 FactionTraitSymbol = "RAIDERS"
	FactionTraitSymbolREBELLIOUS              FactionTraitSymbol = "REBELLIOUS"
	FactionTraitSymbolRESEARCHFOCUSED         FactionTraitSymbol = "RESEARCH_FOCUSED"
	FactionTraitSymbolRESOURCEFUL             FactionTraitSymbol = "RESOURCEFUL"
	FactionTraitSymbolSCAVENGERS              FactionTraitSymbol = "SCAVENGERS"
	FactionTraitSymbolSECRETIVE               FactionTraitSymbol = "SECRETIVE"
	FactionTraitSymbolSELFINTERESTED          FactionTraitSymbol = "SELF_INTERESTED"
	FactionTraitSymbolSELFSUFFICIENT          FactionTraitSymbol = "SELF_SUFFICIENT"
	FactionTraitSymbolSMUGGLERS               FactionTraitSymbol = "SMUGGLERS"
	FactionTraitSymbolSTRATEGIC               FactionTraitSymbol = "STRATEGIC"
	FactionTraitSymbolTECHNOLOGICALLYADVANCED FactionTraitSymbol = "TECHNOLOGICALLY_ADVANCED"
	FactionTraitSymbolTREASUREHUNTERS         FactionTraitSymbol = "TREASURE_HUNTERS"
	FactionTraitSymbolUNITED                  FactionTraitSymbol = "UNITED"
	FactionTraitSymbolUNPREDICTABLE           FactionTraitSymbol = "UNPREDICTABLE"
	FactionTraitSymbolVISIONARY               FactionTraitSymbol = "VISIONARY"
	FactionTraitSymbolWELCOMING               FactionTraitSymbol = "WELCOMING"
)

// Defines values for MarketTradeGoodSupply.
const (
	MarketTradeGoodSupplyABUNDANT MarketTradeGoodSupply = "ABUNDANT"
	MarketTradeGoodSupplyLIMITED  MarketTradeGoodSupply = "LIMITED"
	MarketTradeGoodSupplyMODERATE MarketTradeGoodSupply = "MODERATE"
	MarketTradeGoodSupplySCARCE   MarketTradeGoodSupply = "SCARCE"
)

// Defines values for MarketTransactionType.
const (
	PURCHASE MarketTransactionType = "PURCHASE"
	SELL     MarketTransactionType = "SELL"
)

// Defines values for ShipCrewRotation.
const (
	RELAXED ShipCrewRotation = "RELAXED"
	STRICT  ShipCrewRotation = "STRICT"
)

// Defines values for ShipEngineSymbol.
const (
	ShipEngineSymbolENGINEHYPERDRIVEI   ShipEngineSymbol = "ENGINE_HYPER_DRIVE_I"
	ShipEngineSymbolENGINEIMPULSEDRIVEI ShipEngineSymbol = "ENGINE_IMPULSE_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEI     ShipEngineSymbol = "ENGINE_ION_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEII    ShipEngineSymbol = "ENGINE_ION_DRIVE_II"
)

// Defines values for ShipFrameSymbol.
const (
	FRAMECARRIER        ShipFrameSymbol = "FRAME_CARRIER"
	FRAMECRUISER        ShipFrameSymbol = "FRAME_CRUISER"
	FRAMEDESTROYER      ShipFrameSymbol = "FRAME_DESTROYER"
	FRAMEDRONE          ShipFrameSymbol = "FRAME_DRONE"
	FRAMEEXPLORER       ShipFrameSymbol = "FRAME_EXPLORER"
	FRAMEFIGHTER        ShipFrameSymbol = "FRAME_FIGHTER"
	FRAMEFRIGATE        ShipFrameSymbol = "FRAME_FRIGATE"
	FRAMEHEAVYFREIGHTER ShipFrameSymbol = "FRAME_HEAVY_FREIGHTER"
	FRAMEINTERCEPTOR    ShipFrameSymbol = "FRAME_INTERCEPTOR"
	FRAMELIGHTFREIGHTER ShipFrameSymbol = "FRAME_LIGHT_FREIGHTER"
	FRAMEMINER          ShipFrameSymbol = "FRAME_MINER"
	FRAMEPROBE          ShipFrameSymbol = "FRAME_PROBE"
	FRAMERACER          ShipFrameSymbol = "FRAME_RACER"
	FRAMESHUTTLE        ShipFrameSymbol = "FRAME_SHUTTLE"
	FRAMETRANSPORT      ShipFrameSymbol = "FRAME_TRANSPORT"
)

// Defines values for ShipModuleSymbol.
const (
	MODULECARGOHOLDI        ShipModuleSymbol = "MODULE_CARGO_HOLD_I"
	MODULECREWQUARTERSI     ShipModuleSymbol = "MODULE_CREW_QUARTERS_I"
	MODULEENVOYQUARTERSI    ShipModuleSymbol = "MODULE_ENVOY_QUARTERS_I"
	MODULEFUELREFINERYI     ShipModuleSymbol = "MODULE_FUEL_REFINERY_I"
	MODULEJUMPDRIVEI        ShipModuleSymbol = "MODULE_JUMP_DRIVE_I"
	MODULEJUMPDRIVEII       ShipModuleSymbol = "MODULE_JUMP_DRIVE_II"
	MODULEJUMPDRIVEIII      ShipModuleSymbol = "MODULE_JUMP_DRIVE_III"
	MODULEMICROREFINERYI    ShipModuleSymbol = "MODULE_MICRO_REFINERY_I"
	MODULEMINERALPROCESSORI ShipModuleSymbol = "MODULE_MINERAL_PROCESSOR_I"
	MODULEOREREFINERYI      ShipModuleSymbol = "MODULE_ORE_REFINERY_I"
	MODULEPASSENGERCABINI   ShipModuleSymbol = "MODULE_PASSENGER_CABIN_I"
	MODULESCIENCELABI       ShipModuleSymbol = "MODULE_SCIENCE_LAB_I"
	MODULESHIELDGENERATORI  ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_I"
	MODULESHIELDGENERATORII ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_II"
	MODULEWARPDRIVEI        ShipModuleSymbol = "MODULE_WARP_DRIVE_I"
	MODULEWARPDRIVEII       ShipModuleSymbol = "MODULE_WARP_DRIVE_II"
	MODULEWARPDRIVEIII      ShipModuleSymbol = "MODULE_WARP_DRIVE_III"
)

// Defines values for ShipMountDeposits.
const (
	ALUMINUMORE     ShipMountDeposits = "ALUMINUM_ORE"
	AMMONIAICE      ShipMountDeposits = "AMMONIA_ICE"
	COPPERORE       ShipMountDeposits = "COPPER_ORE"
	DIAMONDS        ShipMountDeposits = "DIAMONDS"
	GOLDORE         ShipMountDeposits = "GOLD_ORE"
	ICEWATER        ShipMountDeposits = "ICE_WATER"
	IRONORE         ShipMountDeposits = "IRON_ORE"
	MERITIUMORE     ShipMountDeposits = "MERITIUM_ORE"
	PLATINUMORE     ShipMountDeposits = "PLATINUM_ORE"
	PRECIOUSSTONES  ShipMountDeposits = "PRECIOUS_STONES"
	QUARTZSAND      ShipMountDeposits = "QUARTZ_SAND"
	SILICONCRYSTALS ShipMountDeposits = "SILICON_CRYSTALS"
	SILVERORE       ShipMountDeposits = "SILVER_ORE"
	URANITEORE      ShipMountDeposits = "URANITE_ORE"
)

// Defines values for ShipMountSymbol.
const (
	MOUNTGASSIPHONI       ShipMountSymbol = "MOUNT_GAS_SIPHON_I"
	MOUNTGASSIPHONII      ShipMountSymbol = "MOUNT_GAS_SIPHON_II"
	MOUNTGASSIPHONIII     ShipMountSymbol = "MOUNT_GAS_SIPHON_III"
	MOUNTLASERCANNONI     ShipMountSymbol = "MOUNT_LASER_CANNON_I"
	MOUNTMININGLASERI     ShipMountSymbol = "MOUNT_MINING_LASER_I"
	MOUNTMININGLASERII    ShipMountSymbol = "MOUNT_MINING_LASER_II"
	MOUNTMININGLASERIII   ShipMountSymbol = "MOUNT_MINING_LASER_III"
	MOUNTMISSILELAUNCHERI ShipMountSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	MOUNTSENSORARRAYI     ShipMountSymbol = "MOUNT_SENSOR_ARRAY_I"
	MOUNTSENSORARRAYII    ShipMountSymbol = "MOUNT_SENSOR_ARRAY_II"
	MOUNTSENSORARRAYIII   ShipMountSymbol = "MOUNT_SENSOR_ARRAY_III"
	MOUNTSURVEYORI        ShipMountSymbol = "MOUNT_SURVEYOR_I"
	MOUNTSURVEYORII       ShipMountSymbol = "MOUNT_SURVEYOR_II"
	MOUNTSURVEYORIII      ShipMountSymbol = "MOUNT_SURVEYOR_III"
	MOUNTTURRETI          ShipMountSymbol = "MOUNT_TURRET_I"
)

// Defines values for ShipNavFlightMode.
const (
	BURN    ShipNavFlightMode = "BURN"
	CRUISE  ShipNavFlightMode = "CRUISE"
	DRIFT   ShipNavFlightMode = "DRIFT"
	STEALTH ShipNavFlightMode = "STEALTH"
)

// Defines values for ShipNavStatus.
const (
	DOCKED    ShipNavStatus = "DOCKED"
	INORBIT   ShipNavStatus = "IN_ORBIT"
	INTRANSIT ShipNavStatus = "IN_TRANSIT"
)

// Defines values for ShipReactorSymbol.
const (
	REACTORANTIMATTERI ShipReactorSymbol = "REACTOR_ANTIMATTER_I"
	REACTORCHEMICALI   ShipReactorSymbol = "REACTOR_CHEMICAL_I"
	REACTORFISSIONI    ShipReactorSymbol = "REACTOR_FISSION_I"
	REACTORFUSIONI     ShipReactorSymbol = "REACTOR_FUSION_I"
	REACTORSOLARI      ShipReactorSymbol = "REACTOR_SOLAR_I"
)

// Defines values for ShipRole.
const (
	ShipRoleCARRIER     ShipRole = "CARRIER"
	ShipRoleCOMMAND     ShipRole = "COMMAND"
	ShipRoleEXCAVATOR   ShipRole = "EXCAVATOR"
	ShipRoleEXPLORER    ShipRole = "EXPLORER"
	ShipRoleFABRICATOR  ShipRole = "FABRICATOR"
	ShipRoleHARVESTER   ShipRole = "HARVESTER"
	ShipRoleHAULER      ShipRole = "HAULER"
	ShipRoleINTERCEPTOR ShipRole = "INTERCEPTOR"
	ShipRolePATROL      ShipRole = "PATROL"
	ShipRoleREFINERY    ShipRole = "REFINERY"
	ShipRoleREPAIR      ShipRole = "REPAIR"
	ShipRoleSATELLITE   ShipRole = "SATELLITE"
	ShipRoleSURVEYOR    ShipRole = "SURVEYOR"
	ShipRoleTRANSPORT   ShipRole = "TRANSPORT"
)

// Defines values for ShipType.
const (
	SHIPCOMMANDFRIGATE    ShipType = "SHIP_COMMAND_FRIGATE"
	SHIPEXPLORER          ShipType = "SHIP_EXPLORER"
	SHIPHEAVYFREIGHTER    ShipType = "SHIP_HEAVY_FREIGHTER"
	SHIPINTERCEPTOR       ShipType = "SHIP_INTERCEPTOR"
	SHIPLIGHTHAULER       ShipType = "SHIP_LIGHT_HAULER"
	SHIPLIGHTSHUTTLE      ShipType = "SHIP_LIGHT_SHUTTLE"
	SHIPMININGDRONE       ShipType = "SHIP_MINING_DRONE"
	SHIPOREHOUND          ShipType = "SHIP_ORE_HOUND"
	SHIPPROBE             ShipType = "SHIP_PROBE"
	SHIPREFININGFREIGHTER ShipType = "SHIP_REFINING_FREIGHTER"
)

// Defines values for SurveySize.
const (
	SurveySizeLARGE    SurveySize = "LARGE"
	SurveySizeMODERATE SurveySize = "MODERATE"
	SurveySizeSMALL    SurveySize = "SMALL"
)

// Defines values for SystemType.
const (
	SystemTypeBLACKHOLE   SystemType = "BLACK_HOLE"
	SystemTypeBLUESTAR    SystemType = "BLUE_STAR"
	SystemTypeHYPERGIANT  SystemType = "HYPERGIANT"
	SystemTypeNEBULA      SystemType = "NEBULA"
	SystemTypeNEUTRONSTAR SystemType = "NEUTRON_STAR"
	SystemTypeORANGESTAR  SystemType = "ORANGE_STAR"
	SystemTypeREDSTAR     SystemType = "RED_STAR"
	SystemTypeUNSTABLE    SystemType = "UNSTABLE"
	SystemTypeWHITEDWARF  SystemType = "WHITE_DWARF"
	SystemTypeYOUNGSTAR   SystemType = "YOUNG_STAR"
)

// Defines values for TradeSymbol.
const (
	TradeSymbolADVANCEDCIRCUITRY       TradeSymbol = "ADVANCED_CIRCUITRY"
	TradeSymbolAIMAINFRAMES            TradeSymbol = "AI_MAINFRAMES"
	TradeSymbolALUMINUM                TradeSymbol = "ALUMINUM"
	TradeSymbolALUMINUMORE             TradeSymbol = "ALUMINUM_ORE"
	TradeSymbolAMMONIAICE              TradeSymbol = "AMMONIA_ICE"
	TradeSymbolAMMUNITION              TradeSymbol = "AMMUNITION"
	TradeSymbolANTIMATTER              TradeSymbol = "ANTIMATTER"
	TradeSymbolASSAULTRIFLES           TradeSymbol = "ASSAULT_RIFLES"
	TradeSymbolBIOCOMPOSITES           TradeSymbol = "BIOCOMPOSITES"
	TradeSymbolBOTANICALSPECIMENS      TradeSymbol = "BOTANICAL_SPECIMENS"
	TradeSymbolCLOTHING                TradeSymbol = "CLOTHING"
	TradeSymbolCOPPER                  TradeSymbol = "COPPER"
	TradeSymbolCOPPERORE               TradeSymbol = "COPPER_ORE"
	TradeSymbolCULTURALARTIFACTS       TradeSymbol = "CULTURAL_ARTIFACTS"
	TradeSymbolCYBERIMPLANTS           TradeSymbol = "CYBER_IMPLANTS"
	TradeSymbolDIAMONDS                TradeSymbol = "DIAMONDS"
	TradeSymbolDRUGS                   TradeSymbol = "DRUGS"
	TradeSymbolELECTRONICS             TradeSymbol = "ELECTRONICS"
	TradeSymbolENGINEHYPERDRIVEI       TradeSymbol = "ENGINE_HYPER_DRIVE_I"
	TradeSymbolENGINEIMPULSEDRIVEI     TradeSymbol = "ENGINE_IMPULSE_DRIVE_I"
	TradeSymbolENGINEIONDRIVEI         TradeSymbol = "ENGINE_ION_DRIVE_I"
	TradeSymbolENGINEIONDRIVEII        TradeSymbol = "ENGINE_ION_DRIVE_II"
	TradeSymbolEQUIPMENT               TradeSymbol = "EQUIPMENT"
	TradeSymbolEXOTICMATTER            TradeSymbol = "EXOTIC_MATTER"
	TradeSymbolEXPLOSIVES              TradeSymbol = "EXPLOSIVES"
	TradeSymbolFABRICS                 TradeSymbol = "FABRICS"
	TradeSymbolFERTILIZERS             TradeSymbol = "FERTILIZERS"
	TradeSymbolFIREARMS                TradeSymbol = "FIREARMS"
	TradeSymbolFOOD                    TradeSymbol = "FOOD"
	TradeSymbolFUEL                    TradeSymbol = "FUEL"
	TradeSymbolGENETHERAPEUTICS        TradeSymbol = "GENE_THERAPEUTICS"
	TradeSymbolGOLD                    TradeSymbol = "GOLD"
	TradeSymbolGOLDORE                 TradeSymbol = "GOLD_ORE"
	TradeSymbolGRAVITONEMITTERS        TradeSymbol = "GRAVITON_EMITTERS"
	TradeSymbolHOLOGRAPHICS            TradeSymbol = "HOLOGRAPHICS"
	TradeSymbolHYDROCARBON             TradeSymbol = "HYDROCARBON"
	TradeSymbolICEWATER                TradeSymbol = "ICE_WATER"
	TradeSymbolIRON                    TradeSymbol = "IRON"
	TradeSymbolIRONORE                 TradeSymbol = "IRON_ORE"
	TradeSymbolJEWELRY                 TradeSymbol = "JEWELRY"
	TradeSymbolLABINSTRUMENTS          TradeSymbol = "LAB_INSTRUMENTS"
	TradeSymbolLASERRIFLES             TradeSymbol = "LASER_RIFLES"
	TradeSymbolLIQUIDHYDROGEN          TradeSymbol = "LIQUID_HYDROGEN"
	TradeSymbolLIQUIDNITROGEN          TradeSymbol = "LIQUID_NITROGEN"
	TradeSymbolMACHINERY               TradeSymbol = "MACHINERY"
	TradeSymbolMEDICINE                TradeSymbol = "MEDICINE"
	TradeSymbolMERITIUM                TradeSymbol = "MERITIUM"
	TradeSymbolMERITIUMORE             TradeSymbol = "MERITIUM_ORE"
	TradeSymbolMICROFUSIONGENERATORS   TradeSymbol = "MICRO_FUSION_GENERATORS"
	TradeSymbolMICROPROCESSORS         TradeSymbol = "MICROPROCESSORS"
	TradeSymbolMILITARYEQUIPMENT       TradeSymbol = "MILITARY_EQUIPMENT"
	TradeSymbolMODULECARGOHOLDI        TradeSymbol = "MODULE_CARGO_HOLD_I"
	TradeSymbolMODULECREWQUARTERSI     TradeSymbol = "MODULE_CREW_QUARTERS_I"
	TradeSymbolMODULEENVOYQUARTERSI    TradeSymbol = "MODULE_ENVOY_QUARTERS_I"
	TradeSymbolMODULEFUELREFINERYI     TradeSymbol = "MODULE_FUEL_REFINERY_I"
	TradeSymbolMODULEJUMPDRIVEI        TradeSymbol = "MODULE_JUMP_DRIVE_I"
	TradeSymbolMODULEJUMPDRIVEII       TradeSymbol = "MODULE_JUMP_DRIVE_II"
	TradeSymbolMODULEJUMPDRIVEIII      TradeSymbol = "MODULE_JUMP_DRIVE_III"
	TradeSymbolMODULEMICROREFINERYI    TradeSymbol = "MODULE_MICRO_REFINERY_I"
	TradeSymbolMODULEMINERALPROCESSORI TradeSymbol = "MODULE_MINERAL_PROCESSOR_I"
	TradeSymbolMODULEOREREFINERYI      TradeSymbol = "MODULE_ORE_REFINERY_I"
	TradeSymbolMODULEPASSENGERCABINI   TradeSymbol = "MODULE_PASSENGER_CABIN_I"
	TradeSymbolMODULESCIENCELABI       TradeSymbol = "MODULE_SCIENCE_LAB_I"
	TradeSymbolMODULESHIELDGENERATORI  TradeSymbol = "MODULE_SHIELD_GENERATOR_I"
	TradeSymbolMODULESHIELDGENERATORII TradeSymbol = "MODULE_SHIELD_GENERATOR_II"
	TradeSymbolMODULEWARPDRIVEI        TradeSymbol = "MODULE_WARP_DRIVE_I"
	TradeSymbolMODULEWARPDRIVEII       TradeSymbol = "MODULE_WARP_DRIVE_II"
	TradeSymbolMODULEWARPDRIVEIII      TradeSymbol = "MODULE_WARP_DRIVE_III"
	TradeSymbolMOODREGULATORS          TradeSymbol = "MOOD_REGULATORS"
	TradeSymbolMOUNTGASSIPHONI         TradeSymbol = "MOUNT_GAS_SIPHON_I"
	TradeSymbolMOUNTGASSIPHONII        TradeSymbol = "MOUNT_GAS_SIPHON_II"
	TradeSymbolMOUNTGASSIPHONIII       TradeSymbol = "MOUNT_GAS_SIPHON_III"
	TradeSymbolMOUNTLASERCANNONI       TradeSymbol = "MOUNT_LASER_CANNON_I"
	TradeSymbolMOUNTMININGLASERI       TradeSymbol = "MOUNT_MINING_LASER_I"
	TradeSymbolMOUNTMININGLASERII      TradeSymbol = "MOUNT_MINING_LASER_II"
	TradeSymbolMOUNTMININGLASERIII     TradeSymbol = "MOUNT_MINING_LASER_III"
	TradeSymbolMOUNTMISSILELAUNCHERI   TradeSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	TradeSymbolMOUNTSENSORARRAYI       TradeSymbol = "MOUNT_SENSOR_ARRAY_I"
	TradeSymbolMOUNTSENSORARRAYII      TradeSymbol = "MOUNT_SENSOR_ARRAY_II"
	TradeSymbolMOUNTSENSORARRAYIII     TradeSymbol = "MOUNT_SENSOR_ARRAY_III"
	TradeSymbolMOUNTSURVEYORI          TradeSymbol = "MOUNT_SURVEYOR_I"
	TradeSymbolMOUNTSURVEYORII         TradeSymbol = "MOUNT_SURVEYOR_II"
	TradeSymbolMOUNTSURVEYORIII        TradeSymbol = "MOUNT_SURVEYOR_III"
	TradeSymbolMOUNTTURRETI            TradeSymbol = "MOUNT_TURRET_I"
	TradeSymbolNANOBOTS                TradeSymbol = "NANOBOTS"
	TradeSymbolNEURALCHIPS             TradeSymbol = "NEURAL_CHIPS"
	TradeSymbolNOVELLIFEFORMS          TradeSymbol = "NOVEL_LIFEFORMS"
	TradeSymbolPLASTICS                TradeSymbol = "PLASTICS"
	TradeSymbolPLATINUM                TradeSymbol = "PLATINUM"
	TradeSymbolPLATINUMORE             TradeSymbol = "PLATINUM_ORE"
	TradeSymbolPOLYNUCLEOTIDES         TradeSymbol = "POLYNUCLEOTIDES"
	TradeSymbolPRECIOUSSTONES          TradeSymbol = "PRECIOUS_STONES"
	TradeSymbolQUANTUMDRIVES           TradeSymbol = "QUANTUM_DRIVES"
	TradeSymbolQUARTZSAND              TradeSymbol = "QUARTZ_SAND"
	TradeSymbolREACTORANTIMATTERI      TradeSymbol = "REACTOR_ANTIMATTER_I"
	TradeSymbolREACTORCHEMICALI        TradeSymbol = "REACTOR_CHEMICAL_I"
	TradeSymbolREACTORFISSIONI         TradeSymbol = "REACTOR_FISSION_I"
	TradeSymbolREACTORFUSIONI          TradeSymbol = "REACTOR_FUSION_I"
	TradeSymbolREACTORSOLARI           TradeSymbol = "REACTOR_SOLAR_I"
	TradeSymbolRELICTECH               TradeSymbol = "RELIC_TECH"
	TradeSymbolROBOTICDRONES           TradeSymbol = "ROBOTIC_DRONES"
	TradeSymbolSHIPPLATING             TradeSymbol = "SHIP_PLATING"
	TradeSymbolSHIPSALVAGE             TradeSymbol = "SHIP_SALVAGE"
	TradeSymbolSILICONCRYSTALS         TradeSymbol = "SILICON_CRYSTALS"
	TradeSymbolSILVER                  TradeSymbol = "SILVER"
	TradeSymbolSILVERORE               TradeSymbol = "SILVER_ORE"
	TradeSymbolSUPERGRAINS             TradeSymbol = "SUPERGRAINS"
	TradeSymbolURANITE                 TradeSymbol = "URANITE"
	TradeSymbolURANITEORE              TradeSymbol = "URANITE_ORE"
	TradeSymbolVIRALAGENTS             TradeSymbol = "VIRAL_AGENTS"
)

// Defines values for WaypointTraitSymbol.
const (
	WaypointTraitSymbolASHCLOUDS             WaypointTraitSymbol = "ASH_CLOUDS"
	WaypointTraitSymbolBARREN                WaypointTraitSymbol = "BARREN"
	WaypointTraitSymbolBLACKMARKET           WaypointTraitSymbol = "BLACK_MARKET"
	WaypointTraitSymbolBREATHABLEATMOSPHERE  WaypointTraitSymbol = "BREATHABLE_ATMOSPHERE"
	WaypointTraitSymbolBUREAUCRATIC          WaypointTraitSymbol = "BUREAUCRATIC"
	WaypointTraitSymbolCANYONS               WaypointTraitSymbol = "CANYONS"
	WaypointTraitSymbolCOMMONMETALDEPOSITS   WaypointTraitSymbol = "COMMON_METAL_DEPOSITS"
	WaypointTraitSymbolCORROSIVEATMOSPHERE   WaypointTraitSymbol = "CORROSIVE_ATMOSPHERE"
	WaypointTraitSymbolCORRUPT               WaypointTraitSymbol = "CORRUPT"
	WaypointTraitSymbolCRUSHINGGRAVITY       WaypointTraitSymbol = "CRUSHING_GRAVITY"
	WaypointTraitSymbolDIVERSELIFE           WaypointTraitSymbol = "DIVERSE_LIFE"
	WaypointTraitSymbolDRYSEABEDS            WaypointTraitSymbol = "DRY_SEABEDS"
	WaypointTraitSymbolEXPLORATIONOUTPOST    WaypointTraitSymbol = "EXPLORATION_OUTPOST"
	WaypointTraitSymbolEXPLOSIVEGASES        WaypointTraitSymbol = "EXPLOSIVE_GASES"
	WaypointTraitSymbolEXTREMEPRESSURE       WaypointTraitSymbol = "EXTREME_PRESSURE"
	WaypointTraitSymbolEXTREMETEMPERATURES   WaypointTraitSymbol = "EXTREME_TEMPERATURES"
	WaypointTraitSymbolFOSSILS               WaypointTraitSymbol = "FOSSILS"
	WaypointTraitSymbolFROZEN                WaypointTraitSymbol = "FROZEN"
	WaypointTraitSymbolHIGHTECH              WaypointTraitSymbol = "HIGH_TECH"
	WaypointTraitSymbolICECRYSTALS           WaypointTraitSymbol = "ICE_CRYSTALS"
	WaypointTraitSymbolINDUSTRIAL            WaypointTraitSymbol = "INDUSTRIAL"
	WaypointTraitSymbolJOVIAN                WaypointTraitSymbol = "JOVIAN"
	WaypointTraitSymbolJUNGLE                WaypointTraitSymbol = "JUNGLE"
	WaypointTraitSymbolMAGMASEAS             WaypointTraitSymbol = "MAGMA_SEAS"
	WaypointTraitSymbolMARKETPLACE           WaypointTraitSymbol = "MARKETPLACE"
	WaypointTraitSymbolMEGASTRUCTURES        WaypointTraitSymbol = "MEGA_STRUCTURES"
	WaypointTraitSymbolMETHANEPOOLS          WaypointTraitSymbol = "METHANE_POOLS"
	WaypointTraitSymbolMILITARYBASE          WaypointTraitSymbol = "MILITARY_BASE"
	WaypointTraitSymbolMINERALDEPOSITS       WaypointTraitSymbol = "MINERAL_DEPOSITS"
	WaypointTraitSymbolMUTATEDFLORA          WaypointTraitSymbol = "MUTATED_FLORA"
	WaypointTraitSymbolOCEAN                 WaypointTraitSymbol = "OCEAN"
	WaypointTraitSymbolOUTPOST               WaypointTraitSymbol = "OUTPOST"
	WaypointTraitSymbolOVERCROWDED           WaypointTraitSymbol = "OVERCROWDED"
	WaypointTraitSymbolPERPETUALDAYLIGHT     WaypointTraitSymbol = "PERPETUAL_DAYLIGHT"
	WaypointTraitSymbolPERPETUALOVERCAST     WaypointTraitSymbol = "PERPETUAL_OVERCAST"
	WaypointTraitSymbolPRECIOUSMETALDEPOSITS WaypointTraitSymbol = "PRECIOUS_METAL_DEPOSITS"
	WaypointTraitSymbolRAREMETALDEPOSITS     WaypointTraitSymbol = "RARE_METAL_DEPOSITS"
	WaypointTraitSymbolRESEARCHFACILITY      WaypointTraitSymbol = "RESEARCH_FACILITY"
	WaypointTraitSymbolROCKY                 WaypointTraitSymbol = "ROCKY"
	WaypointTraitSymbolSALTFLATS             WaypointTraitSymbol = "SALT_FLATS"
	WaypointTraitSymbolSCARCELIFE            WaypointTraitSymbol = "SCARCE_LIFE"
	WaypointTraitSymbolSCATTEREDSETTLEMENTS  WaypointTraitSymbol = "SCATTERED_SETTLEMENTS"
	WaypointTraitSymbolSHIPYARD              WaypointTraitSymbol = "SHIPYARD"
	WaypointTraitSymbolSPRAWLINGCITIES       WaypointTraitSymbol = "SPRAWLING_CITIES"
	WaypointTraitSymbolSTRIPPED              WaypointTraitSymbol = "STRIPPED"
	WaypointTraitSymbolSTRONGGRAVITY         WaypointTraitSymbol = "STRONG_GRAVITY"
	WaypointTraitSymbolSTRONGMAGNETOSPHERE   WaypointTraitSymbol = "STRONG_MAGNETOSPHERE"
	WaypointTraitSymbolSUPERVOLCANOES        WaypointTraitSymbol = "SUPERVOLCANOES"
	WaypointTraitSymbolSURVEILLANCEOUTPOST   WaypointTraitSymbol = "SURVEILLANCE_OUTPOST"
	WaypointTraitSymbolSWAMP                 WaypointTraitSymbol = "SWAMP"
	WaypointTraitSymbolTEMPERATE             WaypointTraitSymbol = "TEMPERATE"
	WaypointTraitSymbolTERRAFORMED           WaypointTraitSymbol = "TERRAFORMED"
	WaypointTraitSymbolTOXICATMOSPHERE       WaypointTraitSymbol = "TOXIC_ATMOSPHERE"
	WaypointTraitSymbolTRADINGHUB            WaypointTraitSymbol = "TRADING_HUB"
	WaypointTraitSymbolUNCHARTED             WaypointTraitSymbol = "UNCHARTED"
	WaypointTraitSymbolVASTRUINS             WaypointTraitSymbol = "VAST_RUINS"
	WaypointTraitSymbolVIBRANTAURORAS        WaypointTraitSymbol = "VIBRANT_AURORAS"
	WaypointTraitSymbolVOLCANIC              WaypointTraitSymbol = "VOLCANIC"
	WaypointTraitSymbolWEAKGRAVITY           WaypointTraitSymbol = "WEAK_GRAVITY"
)

// Defines values for WaypointType.
const (
	WaypointTypeASTEROIDFIELD  WaypointType = "ASTEROID_FIELD"
	WaypointTypeDEBRISFIELD    WaypointType = "DEBRIS_FIELD"
	WaypointTypeGASGIANT       WaypointType = "GAS_GIANT"
	WaypointTypeGRAVITYWELL    WaypointType = "GRAVITY_WELL"
	WaypointTypeJUMPGATE       WaypointType = "JUMP_GATE"
	WaypointTypeMOON           WaypointType = "MOON"
	WaypointTypeNEBULA         WaypointType = "NEBULA"
	WaypointTypeORBITALSTATION WaypointType = "ORBITAL_STATION"
	WaypointTypePLANET         WaypointType = "PLANET"
)

// Defines values for ShipRefineJSONBodyProduce.
const (
	ALUMINUM ShipRefineJSONBodyProduce = "ALUMINUM"
	COPPER   ShipRefineJSONBodyProduce = "COPPER"
	FUEL     ShipRefineJSONBodyProduce = "FUEL"
	GOLD     ShipRefineJSONBodyProduce = "GOLD"
	IRON     ShipRefineJSONBodyProduce = "IRON"
	MERITIUM ShipRefineJSONBodyProduce = "MERITIUM"
	PLATINUM ShipRefineJSONBodyProduce = "PLATINUM"
	SILVER   ShipRefineJSONBodyProduce = "SILVER"
	URANITE  ShipRefineJSONBodyProduce = "URANITE"
)

// Agent defines model for Agent.
type Agent struct {
	AccountId string `json:"accountId"`

	// Credits The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
	Credits int `json:"credits"`

	// Headquarters The headquarters of the agent.
	Headquarters string `json:"headquarters"`
	Symbol       string `json:"symbol"`
}

// Chart The chart of a system or waypoint, which makes the location visible to other agents.
type Chart struct {
	SubmittedBy    *string    `json:"submittedBy,omitempty"`
	SubmittedOn    *time.Time `json:"submittedOn,omitempty"`
	WaypointSymbol *string    `json:"waypointSymbol,omitempty"`
}

// ConnectedSystem defines model for ConnectedSystem.
type ConnectedSystem struct {
	Distance int `json:"distance"`

	// FactionSymbol The symbol of the faction that owns the connected jump gate in the system.
	FactionSymbol *string `json:"factionSymbol,omitempty"`
	SectorSymbol  string  `json:"sectorSymbol"`
	Symbol        string  `json:"symbol"`

	// Type The type of waypoint.
	Type SystemType `json:"type"`
	X    int        `json:"x"`
	Y    int        `json:"y"`
}

// Contract defines model for Contract.
type Contract struct {
	// Accepted Whether the contract has been accepted by the agent
	Accepted bool `json:"accepted"`

	// Expiration The time at which the contract expires
	Expiration time.Time `json:"expiration"`

	// FactionSymbol The symbol of the faction that this contract is for.
	FactionSymbol string `json:"factionSymbol"`

	// Fulfilled Whether the contract has been fulfilled
	Fulfilled bool          `json:"fulfilled"`
	Id        string        `json:"id"`
	Terms     ContractTerms `json:"terms"`
	Type      ContractType  `json:"type"`
}

// ContractType defines model for Contract.Type.
type ContractType string

// ContractDeliverGood The details of a delivery contract. Includes the type of good, units needed, and the destination.
type ContractDeliverGood struct {
	// DestinationSymbol The destination where goods need to be delivered.
	DestinationSymbol string `json:"destinationSymbol"`

	// TradeSymbol The symbol of the trade good to deliver.
	TradeSymbol string `json:"tradeSymbol"`

	// UnitsFulfilled The number of units fulfilled on this contract.
	UnitsFulfilled int `json:"unitsFulfilled"`

	// UnitsRequired The number of units that need to be delivered on this contract.
	UnitsRequired int `json:"unitsRequired"`
}

// ContractPayment defines model for ContractPayment.
type ContractPayment struct {
	// OnAccepted The amount of credits received up front for accepting the contract.
	OnAccepted int `json:"onAccepted"`

	// OnFulfilled The amount of credits received when the contract is fulfilled.
	OnFulfilled int `json:"onFulfilled"`
}

// ContractTerms defines model for ContractTerms.
type ContractTerms struct {
	// Deadline The deadline for the contract.
	Deadline time.Time              `json:"deadline"`
	Deliver  *[]ContractDeliverGood `json:"deliver,omitempty"`
	Payment  ContractPayment        `json:"payment"`
}

// Cooldown A cooldown is a period of time in which a ship cannot perform certain actions.
type Cooldown struct {
	// Expiration The date and time when the cooldown expires in ISO 8601 format
	Expiration time.Time `json:"expiration"`

	// RemainingSeconds The remaining duration of the cooldown in seconds
	RemainingSeconds int `json:"remainingSeconds"`

	// ShipSymbol The symbol of the ship that is on cooldown
	ShipSymbol string `json:"shipSymbol"`

	// TotalSeconds The total duration of the cooldown in seconds
	TotalSeconds int `json:"totalSeconds"`
}

// Extraction defines model for Extraction.
type Extraction struct {
	ShipSymbol string          `json:"shipSymbol"`
	Yield      ExtractionYield `json:"yield"`
}

// ExtractionYield defines model for ExtractionYield.
type ExtractionYield struct {
	Symbol string `json:"symbol"`

	// Units The number of units extracted that were placed into the ship's cargo hold.
	Units int `json:"units"`
}

// Faction defines model for Faction.
type Faction struct {
	Description  string         `json:"description"`
	Headquarters string         `json:"headquarters"`
	Name         string         `json:"name"`
	Symbol       string         `json:"symbol"`
	Traits       []FactionTrait `json:"traits"`
}

// FactionTrait defines model for FactionTrait.
type FactionTrait struct {
	// Description A description of the trait.
	Description string `json:"description"`

	// Name The name of the trait.
	Name string `json:"name"`

	// Symbol The unique identifier of the trait.
	Symbol FactionTraitSymbol `json:"symbol"`
}

// FactionTraitSymbol The unique identifier of the trait.
type FactionTraitSymbol string

// JumpGate defines model for JumpGate.
type JumpGate struct {
	// ConnectedSystems The systems within range of the gate that have a corresponding gate.
	ConnectedSystems []ConnectedSystem `json:"connectedSystems"`

	// FactionSymbol The symbol of the faction that owns the gate.
	FactionSymbol *string `json:"factionSymbol,omitempty"`

	// JumpRange The maximum jump range of the gate.
	JumpRange float32 `json:"jumpRange"`
}

// Market defines model for Market.
type Market struct {
	// Exchange The list of goods that are bought and sold between agents at this market.
	Exchange []TradeGood `json:"exchange"`

	// Exports The list of goods that are exported from this market.
	Exports []TradeGood `json:"exports"`

	// Imports The list of goods that are sought as imports in this market.
	Imports []TradeGood `json:"imports"`

	// Symbol The symbol of the market. The symbol is the same as the waypoint where the market is located.
	Symbol string `json:"symbol"`

	// TradeGoods The list of goods that are traded at this market. Visible only when a ship is present at the market.
	TradeGoods *[]MarketTradeGood `json:"tradeGoods,omitempty"`

	// Transactions The list of recent transactions at this market. Visible only when a ship is present at the market.
	Transactions *[]MarketTransaction `json:"transactions,omitempty"`
}

// MarketTradeGood defines model for MarketTradeGood.
type MarketTradeGood struct {
	// PurchasePrice The price at which this good can be purchased from the market.
	PurchasePrice int `json:"purchasePrice"`

	// SellPrice The price at which this good can be sold to the market.
	SellPrice int `json:"sellPrice"`

	// Supply A rough estimate of the total supply of this good in the marketplace.
	Supply MarketTradeGoodSupply `json:"supply"`

	// Symbol The symbol of the trade good.
	Symbol string `json:"symbol"`

	// TradeVolume The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be.
	TradeVolume int `json:"tradeVolume"`
}

// MarketTradeGoodSupply A rough estimate of the total supply of this good in the marketplace.
type MarketTradeGoodSupply string

// MarketTransaction defines model for MarketTransaction.
type MarketTransaction struct {
	// PricePerUnit The price per unit of the transaction.
	PricePerUnit int `json:"pricePerUnit"`

	// ShipSymbol The symbol of the ship that made the transaction.
	ShipSymbol string `json:"shipSymbol"`

	// Timestamp The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`

	// TotalPrice The total price of the transaction.
	TotalPrice int `json:"totalPrice"`

	// TradeSymbol The symbol of the trade good.
	TradeSymbol string `json:"tradeSymbol"`

	// Type The type of transaction.
	Type MarketTransactionType `json:"type"`

	// Units The number of units of the transaction.
	Units int `json:"units"`

	// WaypointSymbol The symbol of the waypoint where the transaction took place.
	WaypointSymbol string `json:"waypointSymbol"`
}

// MarketTransactionType The type of transaction.
type MarketTransactionType string

// Meta defines model for Meta.
type Meta struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
	Total int `json:"total"`
}

// ScannedShip The ship that was scanned. Details include information about the ship that could be detected by the scanner.
type ScannedShip struct {
	// Engine The engine of the ship.
	Engine struct {
		Symbol string `json:"symbol"`
	} `json:"engine"`

	// Frame The frame of the ship.
	Frame *struct {
		Symbol string `json:"symbol"`
	} `json:"frame,omitempty"`
	Mounts *[]struct {
		Symbol string `json:"symbol"`
	} `json:"mounts,omitempty"`

	// Nav The navigation information of the ship.
	Nav ShipNav `json:"nav"`

	// Reactor The reactor of the ship.
	Reactor *struct {
		Symbol string `json:"symbol"`
	} `json:"reactor,omitempty"`

	// Registration The public registration information of the ship
	Registration ShipRegistration `json:"registration"`

	// Symbol The globally unique identifier of the ship.
	Symbol string `json:"symbol"`
}

// ScannedSystem defines model for ScannedSystem.
type ScannedSystem struct {
	Distance     int    `json:"distance"`
	SectorSymbol string `json:"sectorSymbol"`
	Symbol       string `json:"symbol"`

	// Type The type of waypoint.
	Type SystemType `json:"type"`
	X    int        `json:"x"`
	Y    int        `json:"y"`
}

// ScannedWaypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
type ScannedWaypoint struct {
	// Chart The chart of a system or waypoint, which makes the location visible to other agents.
	Chart        *Chart            `json:"chart,omitempty"`
	Faction      *WaypointFaction  `json:"faction,omitempty"`
	Orbitals     []WaypointOrbital `json:"orbitals"`
	Symbol       string            `json:"symbol"`
	SystemSymbol string            `json:"systemSymbol"`

	// Traits The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// Ship A ship
type Ship struct {
	Cargo ShipCargo `json:"cargo"`

	// Crew The ship's crew service and maintain the ship's systems and equipment.
	Crew ShipCrew `json:"crew"`

	// Engine The engine determines how quickly a ship travels between waypoints.
	Engine ShipEngine `json:"engine"`

	// Frame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
	Frame ShipFrame `json:"frame"`

	// Fuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
	Fuel    ShipFuel     `json:"fuel"`
	Modules []ShipModule `json:"modules"`
	Mounts  []ShipMount  `json:"mounts"`

	// Nav The navigation information of the ship.
	Nav ShipNav `json:"nav"`

	// Reactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
	Reactor ShipReactor `json:"reactor"`

	// Registration The public registration information of the ship
	Registration ShipRegistration `json:"registration"`

	// Symbol The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]_[HEX_ID]`
	Symbol string `json:"symbol"`
}

// ShipCargo defines model for ShipCargo.
type ShipCargo struct {
	// Capacity The max number of items that can be stored in the cargo hold.
	Capacity int `json:"capacity"`

	// Inventory The items currently in the cargo hold.
	Inventory []ShipCargoItem `json:"inventory"`

	// Units The number of items currently stored in the cargo hold.
	Units int `json:"units"`
}

// ShipCargoItem The type of cargo item and the number of units.
type ShipCargoItem struct {
	// Description The description of the cargo item type.
	Description string `json:"description"`

	// Name The name of the cargo item type.
	Name string `json:"name"`

	// Symbol The unique identifier of the cargo item type.
	Symbol string `json:"symbol"`

	// Units The number of units of the cargo item.
	Units int `json:"units"`
}

// ShipCondition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
type ShipCondition = int

// ShipCrew The ship's crew service and maintain the ship's systems and equipment.
type ShipCrew struct {
	// Capacity The maximum number of crew members the ship can support.
	Capacity int `json:"capacity"`

	// Current The current number of crew members on the ship.
	Current int `json:"current"`

	// Morale A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
	Morale int `json:"morale"`

	// Required The minimum number of crew members required to maintain the ship.
	Required int `json:"required"`

	// Rotation The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
	Rotation ShipCrewRotation `json:"rotation"`

	// Wages The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
	Wages int `json:"wages"`
}

// ShipCrewRotation The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
type ShipCrewRotation string

// ShipEngine The engine determines how quickly a ship travels between waypoints.
type ShipEngine struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition   *ShipCondition `json:"condition,omitempty"`
	Description string         `json:"description"`
	Name        string         `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Speed        float32          `json:"speed"`
	Symbol       ShipEngineSymbol `json:"symbol"`
}

// ShipEngineSymbol defines model for ShipEngine.Symbol.
type ShipEngineSymbol string

// ShipFrame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
type ShipFrame struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition      *ShipCondition `json:"condition,omitempty"`
	Description    string         `json:"description"`
	FuelCapacity   int            `json:"fuelCapacity"`
	ModuleSlots    int            `json:"moduleSlots"`
	MountingPoints int            `json:"mountingPoints"`
	Name           string         `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Symbol       ShipFrameSymbol  `json:"symbol"`
}

// ShipFrameSymbol defines model for ShipFrame.Symbol.
type ShipFrameSymbol string

// ShipFuel Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
type ShipFuel struct {
	// Capacity The maximum amount of fuel the ship's tanks can hold.
	Capacity int `json:"capacity"`
	Consumed *struct {
		// Amount The amount of fuel consumed by the most recent transit or action.
		Amount int `json:"amount"`

		// Timestamp The time at which the fuel was consumed.
		Timestamp time.Time `json:"timestamp"`
	} `json:"consumed,omitempty"`

	// Current The current amount of fuel in the ship's tanks.
	Current int `json:"current"`
}

// ShipModule A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
type ShipModule struct {
	Capacity    *int    `json:"capacity,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Range       *int    `json:"range,omitempty"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Symbol       ShipModuleSymbol `json:"symbol"`
}

// ShipModuleSymbol defines model for ShipModule.Symbol.
type ShipModuleSymbol string

// ShipMount A mount is installed on the exterier of a ship.
type ShipMount struct {
	Deposits    *[]ShipMountDeposits `json:"deposits,omitempty"`
	Description *string              `json:"description,omitempty"`
	Name        string               `json:"name"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Strength     *int             `json:"strength,omitempty"`
	Symbol       ShipMountSymbol  `json:"symbol"`
}

// ShipMountDeposits defines model for ShipMount.Deposits.
type ShipMountDeposits string

// ShipMountSymbol defines model for ShipMount.Symbol.
type ShipMountSymbol string

// ShipNav The navigation information of the ship.
type ShipNav struct {
	// FlightMode The ship's set speed when traveling between waypoints or systems.
	FlightMode ShipNavFlightMode `json:"flightMode"`

	// Route The routing information for the ship's most recent transit or current location.
	Route ShipNavRoute `json:"route"`

	// Status The current status of the ship
	Status ShipNavStatus `json:"status"`

	// SystemSymbol The system symbol of the ship's current location.
	SystemSymbol string `json:"systemSymbol"`

	// WaypointSymbol The waypoint symbol of the ship's current location, or if the ship is in-transit, the waypoint symbol of the ship's destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// ShipNavFlightMode The ship's set speed when traveling between waypoints or systems.
type ShipNavFlightMode string

// ShipNavRoute The routing information for the ship's most recent transit or current location.
type ShipNavRoute struct {
	// Arrival The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.
	Arrival time.Time `json:"arrival"`

	// Departure The destination or departure of a ships nav route.
	Departure ShipNavRouteWaypoint `json:"departure"`

	// DepartureTime The date time of the ship's departure.
	DepartureTime time.Time `json:"departureTime"`

	// Destination The destination or departure of a ships nav route.
	Destination ShipNavRouteWaypoint `json:"destination"`
}

// ShipNavRouteWaypoint The destination or departure of a ships nav route.
type ShipNavRouteWaypoint struct {
	Symbol       string `json:"symbol"`
	SystemSymbol string `json:"systemSymbol"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// ShipNavStatus The current status of the ship
type ShipNavStatus string

// ShipReactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
type ShipReactor struct {
	// Condition Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition   *ShipCondition `json:"condition,omitempty"`
	Description string         `json:"description"`
	Name        string         `json:"name"`
	PowerOutput int            `json:"powerOutput"`

	// Requirements The requirements for installation on a ship
	Requirements ShipRequirements  `json:"requirements"`
	Symbol       ShipReactorSymbol `json:"symbol"`
}

// ShipReactorSymbol defines model for ShipReactor.Symbol.
type ShipReactorSymbol string

// ShipRegistration The public registration information of the ship
type ShipRegistration struct {
	// FactionSymbol The symbol of the faction the ship is registered with
	FactionSymbol string `json:"factionSymbol"`

	// Name The agent's registered name of the ship
	Name string `json:"name"`

	// Role The registered role of the ship
	Role ShipRole `json:"role"`
}

// ShipRequirements The requirements for installation on a ship
type ShipRequirements struct {
	// Crew The number of crew required for operation.
	Crew *int `json:"crew,omitempty"`

	// Power The amount of power required from the reactor.
	Power *int `json:"power,omitempty"`

	// Slots The number of module slots required for installation.
	Slots *int `json:"slots,omitempty"`
}

// ShipRole The registered role of the ship
type ShipRole string

// ShipType defines model for ShipType.
type ShipType string

// Shipyard defines model for Shipyard.
type Shipyard struct {
	// ShipTypes The list of ship types available for purchase at this shipyard.
	ShipTypes []struct {
		Type *ShipType `json:"type,omitempty"`
	} `json:"shipTypes"`

	// Ships The ships that are currently available for purchase at the shipyard.
	Ships *[]ShipyardShip `json:"ships,omitempty"`

	// Symbol The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
	Symbol string `json:"symbol"`

	// Transactions The list of recent transactions at this shipyard.
	Transactions *[]ShipyardTransaction `json:"transactions,omitempty"`
}

// ShipyardShip defines model for ShipyardShip.
type ShipyardShip struct {
	Description string `json:"description"`

	// Engine The engine determines how quickly a ship travels between waypoints.
	Engine ShipEngine `json:"engine"`

	// Frame The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
	Frame         ShipFrame    `json:"frame"`
	Modules       []ShipModule `json:"modules"`
	Mounts        []ShipMount  `json:"mounts"`
	Name          string       `json:"name"`
	PurchasePrice int          `json:"purchasePrice"`

	// Reactor The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
	Reactor ShipReactor `json:"reactor"`
	Type    *ShipType   `json:"type,omitempty"`
}

// ShipyardTransaction defines model for ShipyardTransaction.
type ShipyardTransaction struct {
	// AgentSymbol The symbol of the agent that made the transaction.
	AgentSymbol string `json:"agentSymbol"`

	// Price The price of the transaction.
	Price int `json:"price"`

	// ShipSymbol The symbol of the ship that was purchased.
	ShipSymbol string `json:"shipSymbol"`

	// Timestamp The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`

	// WaypointSymbol The symbol of the waypoint where the transaction took place.
	WaypointSymbol string `json:"waypointSymbol"`
}

// Survey A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
type Survey struct {
	// Deposits A list of deposits that can be found at this location.
	Deposits []SurveyDeposit `json:"deposits"`

	// Expiration The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.
	Expiration time.Time `json:"expiration"`

	// Signature A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.
	Signature string `json:"signature"`

	// Size The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
	Size SurveySize `json:"size"`

	// Symbol The symbol of the waypoint that this survey is for.
	Symbol string `json:"symbol"`
}

// SurveySize The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
type SurveySize string

// SurveyDeposit A surveyed deposit of a mineral or resource available for extraction.
type SurveyDeposit struct {
	// Symbol The symbol of the deposit.
	Symbol string `json:"symbol"`
}

// System defines model for System.
type System struct {
	Factions     []SystemFaction `json:"factions"`
	SectorSymbol string          `json:"sectorSymbol"`
	Symbol       string          `json:"symbol"`

	// Type The type of waypoint.
	Type      SystemType       `json:"type"`
	Waypoints []SystemWaypoint `json:"waypoints"`
	X         int              `json:"x"`
	Y         int              `json:"y"`
}

// SystemFaction defines model for SystemFaction.
type SystemFaction struct {
	Symbol string `json:"symbol"`
}

// SystemType The type of waypoint.
type SystemType string

// SystemWaypoint defines model for SystemWaypoint.
type SystemWaypoint struct {
	Symbol string `json:"symbol"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// TradeGood defines model for TradeGood.
type TradeGood struct {
	Description string      `json:"description"`
	Name        string      `json:"name"`
	Symbol      TradeSymbol `json:"symbol"`
}

// TradeSymbol defines model for TradeSymbol.
type TradeSymbol string

// Waypoint A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
type Waypoint struct {
	// Chart The chart of a system or waypoint, which makes the location visible to other agents.
	Chart        *Chart            `json:"chart,omitempty"`
	Faction      *WaypointFaction  `json:"faction,omitempty"`
	Orbitals     []WaypointOrbital `json:"orbitals"`
	Symbol       string            `json:"symbol"`
	SystemSymbol string            `json:"systemSymbol"`

	// Traits The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`

	// Type The type of waypoint.
	Type WaypointType `json:"type"`
	X    int          `json:"x"`
	Y    int          `json:"y"`
}

// WaypointFaction defines model for WaypointFaction.
type WaypointFaction struct {
	Symbol string `json:"symbol"`
}

// WaypointOrbital An orbital is another waypoint that orbits a parent waypoint.
type WaypointOrbital struct {
	Symbol string `json:"symbol"`
}

// WaypointTrait defines model for WaypointTrait.
type WaypointTrait struct {
	// Description A description of the trait.
	Description string `json:"description"`

	// Name The name of the trait.
	Name string `json:"name"`

	// Symbol The unique identifier of the trait.
	Symbol WaypointTraitSymbol `json:"symbol"`
}

// WaypointTraitSymbol The unique identifier of the trait.
type WaypointTraitSymbol string

// WaypointType The type of waypoint.
type WaypointType string

// GetFactionsParams defines parameters for GetFactions.
type GetFactionsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetContractsParams defines parameters for GetContracts.
type GetContractsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeliverContractJSONBody defines parameters for DeliverContract.
type DeliverContractJSONBody struct {
	ShipSymbol  string `json:"shipSymbol"`
	TradeSymbol string `json:"tradeSymbol"`
	Units       int    `json:"units"`
}

// GetMyShipsParams defines parameters for GetMyShips.
type GetMyShipsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PurchaseShipJSONBody defines parameters for PurchaseShip.
type PurchaseShipJSONBody struct {
	ShipType ShipType `json:"shipType"`

	// WaypointSymbol The symbol of the waypoint you want to purchase the ship at.
	WaypointSymbol string `json:"waypointSymbol"`
}

// ExtractResourcesJSONBody defines parameters for ExtractResources.
type ExtractResourcesJSONBody struct {
	// Survey A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
	Survey *Survey `json:"survey,omitempty"`
}

// JettisonJSONBody defines parameters for Jettison.
type JettisonJSONBody struct {
	Symbol string `json:"symbol"`
	Units  int    `json:"units"`
}

// JumpShipJSONBody defines parameters for JumpShip.
type JumpShipJSONBody struct {
	// SystemSymbol The system symbol to jump to.
	SystemSymbol string `json:"systemSymbol"`
}

// PatchShipNavJSONBody defines parameters for PatchShipNav.
type PatchShipNavJSONBody struct {
	// FlightMode The ship's set speed when traveling between waypoints or systems.
	FlightMode *ShipNavFlightMode `json:"flightMode,omitempty"`
}

// NavigateShipJSONBody defines parameters for NavigateShip.
type NavigateShipJSONBody struct {
	// WaypointSymbol The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// PurchaseCargoJSONBody defines parameters for PurchaseCargo.
type PurchaseCargoJSONBody struct {
	Symbol string `json:"symbol"`
	Units  int    `json:"units"`
}

// ShipRefineJSONBody defines parameters for ShipRefine.
type ShipRefineJSONBody struct {
	Produce ShipRefineJSONBodyProduce `json:"produce"`
}

// ShipRefineJSONBodyProduce defines parameters for ShipRefine.
type ShipRefineJSONBodyProduce string

// SellCargoJSONBody defines parameters for SellCargo.
type SellCargoJSONBody struct {
	Symbol string `json:"symbol"`
	Units  int    `json:"units"`
}

// TransferCargoJSONBody defines parameters for TransferCargo.
type TransferCargoJSONBody struct {
	ShipSymbol  string `json:"shipSymbol"`
	TradeSymbol string `json:"tradeSymbol"`
	Units       int    `json:"units"`
}

// WarpShipJSONBody defines parameters for WarpShip.
type WarpShipJSONBody struct {
	// WaypointSymbol The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	// Faction The faction you choose determines your headquarters.
	Faction interface{} `json:"faction"`

	// Symbol How other agents will see your ships and information.
	Symbol string `json:"symbol"`
}

// GetSystemsParams defines parameters for GetSystems.
type GetSystemsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSystemWaypointsParams defines parameters for GetSystemWaypoints.
type GetSystemWaypointsParams struct {
	// Page What entry offset to request
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit How many entries to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeliverContractJSONRequestBody defines body for DeliverContract for application/json ContentType.
type DeliverContractJSONRequestBody DeliverContractJSONBody

// PurchaseShipJSONRequestBody defines body for PurchaseShip for application/json ContentType.
type PurchaseShipJSONRequestBody PurchaseShipJSONBody

// ExtractResourcesJSONRequestBody defines body for ExtractResources for application/json ContentType.
type ExtractResourcesJSONRequestBody ExtractResourcesJSONBody

// JettisonJSONRequestBody defines body for Jettison for application/json ContentType.
type JettisonJSONRequestBody JettisonJSONBody

// JumpShipJSONRequestBody defines body for JumpShip for application/json ContentType.
type JumpShipJSONRequestBody JumpShipJSONBody

// PatchShipNavJSONRequestBody defines body for PatchShipNav for application/json ContentType.
type PatchShipNavJSONRequestBody PatchShipNavJSONBody

// NavigateShipJSONRequestBody defines body for NavigateShip for application/json ContentType.
type NavigateShipJSONRequestBody NavigateShipJSONBody

// PurchaseCargoJSONRequestBody defines body for PurchaseCargo for application/json ContentType.
type PurchaseCargoJSONRequestBody PurchaseCargoJSONBody

// ShipRefineJSONRequestBody defines body for ShipRefine for application/json ContentType.
type ShipRefineJSONRequestBody ShipRefineJSONBody

// SellCargoJSONRequestBody defines body for SellCargo for application/json ContentType.
type SellCargoJSONRequestBody SellCargoJSONBody

// TransferCargoJSONRequestBody defines body for TransferCargo for application/json ContentType.
type TransferCargoJSONRequestBody TransferCargoJSONBody

// WarpShipJSONRequestBody defines body for WarpShip for application/json ContentType.
type WarpShipJSONRequestBody WarpShipJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody
